document.querySelector('mutation-test-report-app').report = {"files":{"/home/runner/work/arkham-odds/arkham-odds/src/Fraction.ts":{"language":"typescript","mutants":[{"id":"0","location":{"end":{"column":2,"line":12},"start":{"column":44,"line":1}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"1","location":{"end":{"column":25,"line":2},"start":{"column":7,"line":2}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2","location":{"end":{"column":25,"line":2},"start":{"column":7,"line":2}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"4","location":{"end":{"column":12,"line":2},"start":{"column":9,"line":2}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"3","location":{"end":{"column":17,"line":2},"start":{"column":15,"line":2}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"5","location":{"end":{"column":23,"line":2},"start":{"column":20,"line":2}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"6","location":{"end":{"column":4,"line":4},"start":{"column":27,"line":2}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"7","location":{"end":{"column":14,"line":5},"start":{"column":7,"line":5}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"8","location":{"end":{"column":14,"line":5},"start":{"column":7,"line":5}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"9","location":{"end":{"column":12,"line":5},"start":{"column":9,"line":5}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Survived"},{"id":"10","location":{"end":{"column":4,"line":7},"start":{"column":16,"line":5}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"11","location":{"end":{"column":12,"line":8},"start":{"column":7,"line":8}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"12","location":{"end":{"column":12,"line":8},"start":{"column":7,"line":8}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"13","location":{"end":{"column":10,"line":8},"start":{"column":9,"line":8}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"14","location":{"end":{"column":10,"line":8},"start":{"column":9,"line":8}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"15","location":{"end":{"column":4,"line":10},"start":{"column":14,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"16","location":{"end":{"column":19,"line":9},"start":{"column":18,"line":9}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"17","location":{"end":{"column":20,"line":11},"start":{"column":19,"line":11}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"19","location":{"end":{"column":4,"line":50},"start":{"column":41,"line":44}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"18","location":{"end":{"column":4,"line":34},"start":{"column":55,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"20","location":{"end":{"column":45,"line":46},"start":{"column":44,"line":46}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"21","location":{"end":{"column":24,"line":46},"start":{"column":23,"line":46}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Killed"},{"id":"22","location":{"end":{"column":27,"line":47},"start":{"column":26,"line":47}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Killed"},{"id":"24","location":{"end":{"column":4,"line":60},"start":{"column":28,"line":58}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"23","location":{"end":{"column":26,"line":48},"start":{"column":25,"line":48}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Killed"},{"id":"26","location":{"end":{"column":4,"line":77},"start":{"column":43,"line":70}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"25","location":{"end":{"column":29,"line":59},"start":{"column":28,"line":59}},"mutatorName":"ArithmeticOperator","replacement":"*","status":"Killed"},{"id":"27","location":{"end":{"column":47,"line":75},"start":{"column":7,"line":74}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"28","location":{"end":{"column":47,"line":75},"start":{"column":7,"line":74}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"29","location":{"end":{"column":46,"line":74},"start":{"column":44,"line":74}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"30","location":{"end":{"column":43,"line":74},"start":{"column":7,"line":74}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"31","location":{"end":{"column":43,"line":74},"start":{"column":7,"line":74}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"32","location":{"end":{"column":26,"line":74},"start":{"column":23,"line":74}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"33","location":{"end":{"column":47,"line":75},"start":{"column":7,"line":75}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"34","location":{"end":{"column":47,"line":75},"start":{"column":7,"line":75}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"35","location":{"end":{"column":28,"line":75},"start":{"column":25,"line":75}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"36","location":{"end":{"column":4,"line":89},"start":{"column":27,"line":83}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"37","location":{"end":{"column":12,"line":85},"start":{"column":9,"line":85}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"38","location":{"end":{"column":12,"line":85},"start":{"column":9,"line":85}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"39","location":{"end":{"column":6,"line":88},"start":{"column":14,"line":85}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"40","location":{"end":{"column":42,"line":86},"start":{"column":41,"line":86}},"mutatorName":"ArithmeticOperator","replacement":"*","status":"Killed"},{"id":"41","location":{"end":{"column":46,"line":87},"start":{"column":45,"line":87}},"mutatorName":"ArithmeticOperator","replacement":"*","status":"Killed"}],"source":"function gcd(a: number, b: number): number {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a > b) {\n    return gcd(a - b, b);\n  }\n  return gcd(a, b - a);\n}\n\n/**\n * A fraction with a numerator and a denominator.\n */\nexport class Fraction {\n  private _numerator: number;\n  private _denominator: number;\n\n  /**\n   * Creates and immediately reduce the fraction using the greatest common\n   * divider of the numerator and denominator.\n   *\n   * @param {number} numerator\n   *   The numerator of this fraction.\n   * @param {number} denominator\n   *   The denominator of this fraction.\n   */\n  constructor(numerator: number, denominator: number) {\n    this._numerator = numerator;\n    this._denominator = denominator;\n    this._reduce();\n  }\n\n  /**\n   * Return a new fraction by adding the given fraction to this fraction.\n   *\n   * @param {Fraction} other\n   *   The fraction to add to this one.\n   * @return {Fraction}\n   *   A new fraction obtained by adding the 2 fractions.\n   */\n  public add(other: Fraction): Fraction {\n    return new Fraction(\n      this._numerator * other._denominator +\n        other._numerator * this._denominator,\n      this._denominator * other._denominator\n    );\n  }\n\n  /**\n   * Returns the number value of this fraction.\n   *\n   * @return {number}\n   *   The number value of this fraction\n   */\n  public valueOf(): number {\n    return this._numerator / this._denominator;\n  }\n\n  /**\n   * Checks if this fraction is equal to the provided fraction.\n   *\n   * @param {Fraction} other\n   *   The fraction to compare to.\n   * @return {boolean}\n   *   `true` if the 2 fractions are equal, `false` else.\n   */\n  public sameAs(other: Fraction): boolean {\n    this._reduce();\n    other._reduce();\n    return (\n      this._numerator === other._numerator &&\n      this._denominator === other._denominator\n    );\n  }\n\n  /**\n   * Reduce the fraction using the greatest common divider of the numerator\n   * and the denominator.\n   */\n  private _reduce(): void {\n    const div = gcd(this._numerator, this._denominator);\n    if (div) {\n      this._numerator = this._numerator / div;\n      this._denominator = this._denominator / div;\n    }\n  }\n}\n"},"/home/runner/work/arkham-odds/arkham-odds/src/bag/Bag.ts":{"language":"typescript","mutants":[{"id":"43","location":{"end":{"column":4,"line":43},"start":{"column":31,"line":41}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"42","location":{"end":{"column":4,"line":33},"start":{"column":32,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"45","location":{"end":{"column":4,"line":77},"start":{"column":42,"line":75}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"46","location":{"end":{"column":4,"line":100},"start":{"column":41,"line":98}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"44","location":{"end":{"column":29,"line":42},"start":{"column":12,"line":42}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"}],"source":"import { Token } from \"../tokens\";\nimport { removeFirst } from \"../utils\";\n\n/**\n * A representation of a Chaos Bag with its tokens. A bag is immutable, each\n * modification (adding or removing tokens) creates a new bag and leave the\n * original bag unchanged.\n *\n * ## Examples\n * ### Creating a bag from scratch\n * ```javascript\n * const T = ArkhamOdds.Token;\n * const myBag = new ArkhamOdds.Bag([\n *   T.ELDER_SIGN, T.PLUS_ONE, T.ZERO, T.MINUS_ONE, T.AUTOFAIL\n * ]);\n * ```\n * ### Creating a bag from predefined bags\n * See [[Bags]].\n * ```javascript\n * const myBag = new ArkhamOdds.Bag(ArkhamOdds.Bags.ThePathToCarcosa.Standard);\n * ```\n */\nexport class Bag {\n  private _tokens: Token[];\n\n  /**\n   * @param {Token[]} tokens\n   *   The tokens to put in the bag. The bag will hold a copy of these tokens\n   *   so that changes to the original array of tokens does not affect the bag.\n   */\n  constructor(tokens: Token[]) {\n    this._tokens = tokens.slice(0);\n  }\n\n  /**\n   * Get tokens in the bag.\n   *\n   * @return {Token[]}\n   *   A copy of tokens in the bag (modification to it will not affect the bag).\n   */\n  public getTokens(): Token[] {\n    return [...this._tokens];\n  }\n\n  /**\n   * Create a new bag with the specified tokens added to it. The original bag is\n   * unchanged which makes it handy to compare odds based on bag composition.\n   *\n   * ## Example\n   * Comparing odds of success when a token is added to the bag.\n   * ```javascript\n   * const bag = new ArkhamOdds.Bag(ArkhamOdds.Bags.ThePathToCarcosa.Standard);\n   * const bagWithTabletAdded = bag.addTokens([ArkhamOdds.Token.TABLET]);\n   *\n   * const effects = ArkhamOdds.DefaultTokenEffects\n   *   .merge(new ArkhamOdds.TokenEffects([\n   *     [ArkhamOdds.Token.SKULL, new ArkhamOdds.Modifier(-1)],\n   *     [ArkhamOdds.Token.CULTIST, new ArkhamOdds.Modifier(-2)],\n   *     [ArkhamOdds.Token.TABLET, new ArkhamOdds.Modifier(-2)],\n   *     [ArkhamOdds.Token.ELDER_THING, new ArkhamOdds.Modifier(-2)],\n   *     [ArkhamOdds.Token.ELDER_SIGN, new ArkhamOdds.Modifier(2)]\n   * ]));\n   *\n   * const [odds, success] = [ArkhamOdds.odds, ArkhamOdds.success];\n   * console.log(\n   *   odds(1, bag, effects, success(2))\n   *   - odds(1, bagWithTabletAdded, effects, success(2)));\n   * ```\n   *\n   * @param {Token[]} tokens\n   *   The tokens to add to the bag.\n   * @return {Bag}\n   *   A new bag.\n   */\n  public addTokens(tokens: Token[]): Bag {\n    return new Bag(this._tokens.concat(tokens));\n  }\n\n  /**\n   * Returns a new bag with the specified token removed. The original bag is\n   * unchanged which makes it handy to compare odds based on bag composition.\n   * This is the method to use for seal effects like\n   * [The Chthonian Stone](https://arkhamdb.com/card/04030)\n   *\n   * ## Example\n   * ```javascript\n   * const bag = new ArkhamOdds.Bag(ArkhamOdds.Bags.ThePathToCarcosa.Standard);\n   * const theChthonianStone = bag.removeToken(ArkhamOdds.Token.CULTIST);\n   * ```\n   *\n   * @param {Token} token\n   *   The token to remove.\n   * @return {Bag}\n   *   A new bag with the token removed. If the original bag does not contain\n   *   an occurrence of the specified token, the method still returns a copy of\n   *   the original bag even if there are no differences in their compositions.\n   */\n  public removeToken(token: Token): Bag {\n    return new Bag(removeFirst(this._tokens, token));\n  }\n}\n"},"/home/runner/work/arkham-odds/arkham-odds/src/bag/Bags.ts":{"language":"typescript","mutants":[{"id":"47","location":{"end":{"column":2,"line":50},"start":{"column":47,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"49","location":{"end":{"column":4,"line":49},"start":{"column":40,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"48","location":{"end":{"column":29,"line":12},"start":{"column":26,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"50","location":{"end":{"column":33,"line":15},"start":{"column":7,"line":14}},"mutatorName":"ConditionalExpression","replacement":"case \"Elder sign\":","status":"Survived"},{"id":"51","location":{"end":{"column":24,"line":14},"start":{"column":12,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"52","location":{"end":{"column":31,"line":17},"start":{"column":7,"line":16}},"mutatorName":"ConditionalExpression","replacement":"case \"+1\":","status":"Survived"},{"id":"53","location":{"end":{"column":16,"line":16},"start":{"column":12,"line":16}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"54","location":{"end":{"column":27,"line":19},"start":{"column":7,"line":18}},"mutatorName":"ConditionalExpression","replacement":"case \"0\":","status":"Survived"},{"id":"55","location":{"end":{"column":15,"line":18},"start":{"column":12,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"56","location":{"end":{"column":32,"line":21},"start":{"column":7,"line":20}},"mutatorName":"ConditionalExpression","replacement":"case \"-1\":","status":"Survived"},{"id":"57","location":{"end":{"column":16,"line":20},"start":{"column":12,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"58","location":{"end":{"column":32,"line":23},"start":{"column":7,"line":22}},"mutatorName":"ConditionalExpression","replacement":"case \"-2\":","status":"Survived"},{"id":"59","location":{"end":{"column":16,"line":22},"start":{"column":12,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"60","location":{"end":{"column":34,"line":25},"start":{"column":7,"line":24}},"mutatorName":"ConditionalExpression","replacement":"case \"-3\":","status":"Survived"},{"id":"61","location":{"end":{"column":16,"line":24},"start":{"column":12,"line":24}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"62","location":{"end":{"column":33,"line":27},"start":{"column":7,"line":26}},"mutatorName":"ConditionalExpression","replacement":"case \"-4\":","status":"Survived"},{"id":"63","location":{"end":{"column":16,"line":26},"start":{"column":12,"line":26}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"64","location":{"end":{"column":33,"line":29},"start":{"column":7,"line":28}},"mutatorName":"ConditionalExpression","replacement":"case \"-5\":","status":"Survived"},{"id":"65","location":{"end":{"column":16,"line":28},"start":{"column":12,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"66","location":{"end":{"column":32,"line":31},"start":{"column":7,"line":30}},"mutatorName":"ConditionalExpression","replacement":"case \"-6\":","status":"Survived"},{"id":"67","location":{"end":{"column":16,"line":30},"start":{"column":12,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"68","location":{"end":{"column":34,"line":33},"start":{"column":7,"line":32}},"mutatorName":"ConditionalExpression","replacement":"case \"-7\":","status":"Survived"},{"id":"69","location":{"end":{"column":16,"line":32},"start":{"column":12,"line":32}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"70","location":{"end":{"column":34,"line":35},"start":{"column":7,"line":34}},"mutatorName":"ConditionalExpression","replacement":"case \"-8\":","status":"Survived"},{"id":"71","location":{"end":{"column":16,"line":34},"start":{"column":12,"line":34}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"72","location":{"end":{"column":28,"line":37},"start":{"column":7,"line":36}},"mutatorName":"ConditionalExpression","replacement":"case \"Skull\":","status":"Survived"},{"id":"73","location":{"end":{"column":19,"line":36},"start":{"column":12,"line":36}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"74","location":{"end":{"column":30,"line":39},"start":{"column":7,"line":38}},"mutatorName":"ConditionalExpression","replacement":"case \"Cultist\":","status":"Survived"},{"id":"75","location":{"end":{"column":21,"line":38},"start":{"column":12,"line":38}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"76","location":{"end":{"column":29,"line":41},"start":{"column":7,"line":40}},"mutatorName":"ConditionalExpression","replacement":"case \"Tablet\":","status":"Survived"},{"id":"77","location":{"end":{"column":20,"line":40},"start":{"column":12,"line":40}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"78","location":{"end":{"column":34,"line":43},"start":{"column":7,"line":42}},"mutatorName":"ConditionalExpression","replacement":"case \"Elder thing\":","status":"Survived"},{"id":"79","location":{"end":{"column":25,"line":42},"start":{"column":12,"line":42}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"80","location":{"end":{"column":31,"line":45},"start":{"column":7,"line":44}},"mutatorName":"ConditionalExpression","replacement":"case \"Autofail\":","status":"Survived"},{"id":"82","location":{"end":{"column":21,"line":47},"start":{"column":7,"line":46}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"RuntimeError"},{"id":"81","location":{"end":{"column":22,"line":44},"start":{"column":12,"line":44}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"83","location":{"end":{"column":2,"line":259},"start":{"column":21,"line":56}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"84","location":{"end":{"column":4,"line":73},"start":{"column":21,"line":60}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"85","location":{"end":{"column":97,"line":62},"start":{"column":7,"line":62}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"86","location":{"end":{"column":98,"line":65},"start":{"column":7,"line":65}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"87","location":{"end":{"column":101,"line":68},"start":{"column":7,"line":68}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"88","location":{"end":{"column":107,"line":71},"start":{"column":7,"line":71}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"89","location":{"end":{"column":4,"line":90},"start":{"column":21,"line":77}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"90","location":{"end":{"column":89,"line":79},"start":{"column":7,"line":79}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"91","location":{"end":{"column":90,"line":82},"start":{"column":7,"line":82}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"92","location":{"end":{"column":93,"line":85},"start":{"column":7,"line":85}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"93","location":{"end":{"column":99,"line":88},"start":{"column":7,"line":88}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"94","location":{"end":{"column":4,"line":107},"start":{"column":21,"line":94}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"95","location":{"end":{"column":87,"line":96},"start":{"column":7,"line":96}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"96","location":{"end":{"column":88,"line":99},"start":{"column":7,"line":99}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"97","location":{"end":{"column":91,"line":102},"start":{"column":7,"line":102}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"98","location":{"end":{"column":97,"line":105},"start":{"column":7,"line":105}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"99","location":{"end":{"column":4,"line":124},"start":{"column":20,"line":111}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"100","location":{"end":{"column":89,"line":113},"start":{"column":7,"line":113}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"101","location":{"end":{"column":89,"line":116},"start":{"column":7,"line":116}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"102","location":{"end":{"column":90,"line":119},"start":{"column":7,"line":119}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"103","location":{"end":{"column":95,"line":122},"start":{"column":7,"line":122}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"104","location":{"end":{"column":4,"line":141},"start":{"column":20,"line":128}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"105","location":{"end":{"column":76,"line":130},"start":{"column":7,"line":130}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"106","location":{"end":{"column":77,"line":133},"start":{"column":7,"line":133}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"107","location":{"end":{"column":77,"line":136},"start":{"column":7,"line":136}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"108","location":{"end":{"column":78,"line":139},"start":{"column":7,"line":139}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"109","location":{"end":{"column":4,"line":158},"start":{"column":32,"line":145}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"110","location":{"end":{"column":87,"line":147},"start":{"column":7,"line":147}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"111","location":{"end":{"column":88,"line":150},"start":{"column":7,"line":150}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"112","location":{"end":{"column":92,"line":153},"start":{"column":7,"line":153}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"113","location":{"end":{"column":97,"line":156},"start":{"column":7,"line":156}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"114","location":{"end":{"column":4,"line":175},"start":{"column":33,"line":162}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"116","location":{"end":{"column":116,"line":167},"start":{"column":7,"line":167}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"115","location":{"end":{"column":115,"line":164},"start":{"column":7,"line":164}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"117","location":{"end":{"column":119,"line":170},"start":{"column":7,"line":170}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"118","location":{"end":{"column":125,"line":173},"start":{"column":7,"line":173}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"120","location":{"end":{"column":140,"line":181},"start":{"column":7,"line":181}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"119","location":{"end":{"column":4,"line":192},"start":{"column":27,"line":179}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"121","location":{"end":{"column":141,"line":184},"start":{"column":7,"line":184}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"122","location":{"end":{"column":144,"line":187},"start":{"column":7,"line":187}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"123","location":{"end":{"column":150,"line":190},"start":{"column":7,"line":190}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"124","location":{"end":{"column":4,"line":203},"start":{"column":23,"line":196}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"125","location":{"end":{"column":143,"line":198},"start":{"column":7,"line":198}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"126","location":{"end":{"column":154,"line":201},"start":{"column":7,"line":201}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"127","location":{"end":{"column":4,"line":214},"start":{"column":23,"line":207}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"128","location":{"end":{"column":121,"line":209},"start":{"column":7,"line":209}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"129","location":{"end":{"column":121,"line":212},"start":{"column":7,"line":212}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"130","location":{"end":{"column":4,"line":225},"start":{"column":26,"line":218}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"131","location":{"end":{"column":88,"line":220},"start":{"column":7,"line":220}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"132","location":{"end":{"column":90,"line":223},"start":{"column":7,"line":223}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"133","location":{"end":{"column":4,"line":236},"start":{"column":24,"line":229}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"134","location":{"end":{"column":130,"line":231},"start":{"column":7,"line":231}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"135","location":{"end":{"column":138,"line":234},"start":{"column":7,"line":234}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"136","location":{"end":{"column":4,"line":247},"start":{"column":30,"line":240}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"137","location":{"end":{"column":104,"line":242},"start":{"column":7,"line":242}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"138","location":{"end":{"column":104,"line":245},"start":{"column":7,"line":245}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"139","location":{"end":{"column":4,"line":258},"start":{"column":29,"line":251}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"140","location":{"end":{"column":110,"line":253},"start":{"column":7,"line":253}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"141","location":{"end":{"column":110,"line":256},"start":{"column":7,"line":256}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import { Token } from \"../tokens\";\n\n/**\n * @internal A function to facilitate the declaration of bag composition.\n *\n * @param {string} tokenList\n *   The comma-separated list of tokens.\n * @return {Token[]}\n *   The array of tokens parsed from the string.\n */\nfunction toTokens(tokenList: string): Token[] {\n  return tokenList.split(\",\").map(s => {\n    switch (s.trim()) {\n      case \"Elder sign\":\n        return Token.ELDER_SIGN;\n      case \"+1\":\n        return Token.PLUS_ONE;\n      case \"0\":\n        return Token.ZERO;\n      case \"-1\":\n        return Token.MINUS_ONE;\n      case \"-2\":\n        return Token.MINUS_TWO;\n      case \"-3\":\n        return Token.MINUS_THREE;\n      case \"-4\":\n        return Token.MINUS_FOUR;\n      case \"-5\":\n        return Token.MINUS_FIVE;\n      case \"-6\":\n        return Token.MINUS_SIX;\n      case \"-7\":\n        return Token.MINUS_SEVEN;\n      case \"-8\":\n        return Token.MINUS_EIGHT;\n      case \"Skull\":\n        return Token.SKULL;\n      case \"Cultist\":\n        return Token.CULTIST;\n      case \"Tablet\":\n        return Token.TABLET;\n      case \"Elder thing\":\n        return Token.ELDER_THING;\n      case \"Autofail\":\n        return Token.AUTOFAIL;\n      default:\n        return null;\n    }\n  });\n}\n\n// tslint:disable:object-literal-sort-keys max-line-length\n/**\n * Bag compositions for the different campaigns.\n */\nexport const Bags = {\n  /**\n   * Night of the Zealot\n   */\n  NightOfTheZealot: {\n    Easy: toTokens(\n      \"+1, +1, 0, 0, 0, -1, -1, -1, -2, -2, Skull, Skull, Cultist, Tablet, Autofail, Elder sign\"\n    ),\n    Standard: toTokens(\n      \"+1, 0, 0, -1, -1, -1, -2, -2, -3, -4, Skull, Skull, Cultist, Tablet, Autofail, Elder sign\"\n    ),\n    Hard: toTokens(\n      \"0, 0, 0, -1, -1, -2, -2, -3, -3, -4, -5, Skull, Skull, Cultist, Tablet, Autofail, Elder sign\"\n    ),\n    Expert: toTokens(\n      \"0, -1, -1, -2, -2, -3, -3, -4, -4, -5, -6, -8, Skull, Skull, Cultist, Tablet, Autofail, Elder sign\"\n    )\n  },\n  /**\n   * The Dunwich Legacy\n   */\n  TheDunwichLegacy: {\n    Easy: toTokens(\n      \"+1, +1, 0, 0, 0, -1, -1, -1, -2, -2, Skull, Skull, Cultist, Autofail, Elder sign\"\n    ),\n    Standard: toTokens(\n      \"+1, 0, 0, -1, -1, -1, -2, -2, -3, -4, Skull, Skull, Cultist, Autofail, Elder sign\"\n    ),\n    Hard: toTokens(\n      \"0, 0, 0, -1, -1, -2, -2, -3, -3, -4, -5, Skull, Skull, Cultist, Autofail, Elder sign\"\n    ),\n    Expert: toTokens(\n      \"0, -1, -1, -2, -2, -3, -3, -4, -4, -5, -6, -8, Skull, Skull, Cultist, Autofail, Elder sign\"\n    )\n  },\n  /**\n   * The Path to Carcosa\n   */\n  ThePathToCarcosa: {\n    Easy: toTokens(\n      \"+1, +1, 0, 0, 0, -1, -1, -1, -2, -2, Skull, Skull, Skull, Autofail, Elder sign\"\n    ),\n    Standard: toTokens(\n      \"+1, 0, 0, -1, -1, -1, -2, -2, -3, -4, Skull, Skull, Skull, Autofail, Elder sign\"\n    ),\n    Hard: toTokens(\n      \"0, 0, 0, -1, -1, -2, -2, -3, -3, -4, -5, Skull, Skull, Skull, Autofail, Elder sign\"\n    ),\n    Expert: toTokens(\n      \"0, -1, -1, -2, -2, -3, -3, -4, -4, -5, -6, -8, Skull, Skull, Skull, Autofail, Elder sign\"\n    )\n  },\n  /**\n   * The Forgotten Age\n   */\n  TheForgottenAge: {\n    Easy: toTokens(\n      \"+1, +1, 0, 0, 0, -1, -1, -2, -3, Skull, Skull, Elder thing, Autofail, Elder sign\"\n    ),\n    Standard: toTokens(\n      \"+1, 0, 0, 0, -1, -2, -2, -3, -5, Skull, Skull, Elder thing, Autofail, Elder sign\"\n    ),\n    Hard: toTokens(\n      \"+1, 0, 0, -1, -2, -3, -3, -4, -6, Skull, Skull, Elder thing, Autofail, Elder sign\"\n    ),\n    Expert: toTokens(\n      \"0, -1, -2, -2, -3, -3, -4, -4, -6, -8, Skull, Skull, Elder thing, Autofail, Elder sign\"\n    )\n  },\n  /**\n   * The Circle Undone\n   */\n  TheCircleUndone: {\n    Easy: toTokens(\n      \"+1, +1, 0, 0, 0, -1, -1, -2, -3, Skull, Skull, Autofail, Elder sign\"\n    ),\n    Standard: toTokens(\n      \"+1, 0, 0, -1, -1, -2, -2, -3, -4, Skull, Skull, Autofail, Elder sign\"\n    ),\n    Hard: toTokens(\n      \"0, 0, -1, -1, -2, -2, -3, -4, -5, Skull, Skull, Autofail, Elder sign\"\n    ),\n    Expert: toTokens(\n      \"0, -1, -1, -2, -2, -3, -4, -6, -8, Skull, Skull, Autofail, Elder sign\"\n    )\n  },\n  /**\n   * The Dream-Eaters : The Dream-Quest\n   */\n  TheDreamEatersTheDreamQuest: {\n    Easy: toTokens(\n      \"+1, +1, 0, 0, 0, –1, –1, –2, –2, Cultist, Tablet, Tablet, Autofail, Elder sign\"\n    ),\n    Standard: toTokens(\n      \"+1, 0, 0, –1, –1, –2, –2, –3, –4, Cultist, Tablet, Tablet, Autofail, Elder sign\"\n    ),\n    Hard: toTokens(\n      \"0, 0, –1, –1, –2, –2, –3, –3, –4, –5, Cultist, Tablet, Tablet, Autofail, Elder sign\"\n    ),\n    Expert: toTokens(\n      \"0, –1, –1, –2, –2, –3, –4, –4, –5, –6, –8, Cultist, Tablet, Tablet, Autofail, Elder sign\"\n    )\n  },\n  /**\n   * The Dream-Eaters : The Web of Dreams\n   */\n  TheDreamEatersTheWebOfDreams: {\n    Easy: toTokens(\n      \"+1, +1, 0, 0, 0, –1, –1, –1, –2, –2, Skull, Skull, Cultist, Elder thing, Elder thing, Autofail, Elder sign\"\n    ),\n    Standard: toTokens(\n      \"+1, 0, 0, –1, –1, –1, –2, –2, –3, –4, Skull, Skull, Cultist, Elder thing, Elder thing, Autofail, Elder sign\"\n    ),\n    Hard: toTokens(\n      \"0, 0, 0, –1, –1, –2, –2, –3, –3, –4, –5, Skull, Skull, Cultist, Elder thing, Elder thing, Autofail, Elder sign\"\n    ),\n    Expert: toTokens(\n      \"0, –1, –1, –2, –2, –3, –3, –4, –4, –5, –6, –8, Skull, Skull, Cultist, Elder thing, Elder thing, Autofail, Elder sign\"\n    )\n  },\n  /**\n   * The Innsmouth Conspiracy\n   */\n  TheInnsmouthConspiracy: {\n    Easy: toTokens(\n      \"+1, +1, 0, 0, 0, –1, –1, –1, –2, –2, Skull, Skull, Cultist, Cultist, Tablet, Tablet, Elder thing, Elder thing, Autofail, Elder sign\"\n    ),\n    Standard: toTokens(\n      \"+1, 0, 0, –1, –1, –1, –2, –2, –3, –4, Skull, Skull, Cultist, Cultist, Tablet, Tablet, Elder thing, Elder thing, Autofail, Elder sign\"\n    ),\n    Hard: toTokens(\n      \"0, 0, 0, –1, –1, –2, –2, –3, –3, –4, –5, Skull, Skull, Cultist, Cultist, Tablet, Tablet, Elder thing, Elder thing, Autofail, Elder sign\"\n    ),\n    Expert: toTokens(\n      \"0, –1, –1, –2, –2, –3, –3, –4, –4, –5, –6, –8, Skull, Skull, Cultist, Cultist, Tablet, Tablet, Elder thing, Elder thing, Autofail, Elder sign\"\n    )\n  },\n  /**\n   * Curse of the Rougarou\n   */\n  CurseOfTheRougarou: {\n    Standard: toTokens(\n      \"+1, +1, 0, 0, 0, -1, -1, -1, -2, -2, -3, -3, -4, -4, -5, -6, Skull, Skull, Cultist, Cultist, Tablet, Elder thing, Autofail, Elder sign\"\n    ),\n    Hard: toTokens(\n      \"+1, 0, 0, 0, -1, -1, -1, -2, -2, -3, -3, -4, -4, -5, -5, -6, -8, Skull, Skull, Skull, Cultist, Cultist, Tablet, Elder thing, Autofail, Elder sign\"\n    )\n  },\n  /**\n   * Carnevale of Horrors\n   */\n  CarnevaleOfHorrors: {\n    Standard: toTokens(\n      \"+1, 0, 0, 0, -1, -1, -1, -2, -3, -4, -6, Skull, Skull, Skull, Cultist, Tablet, Elder thing, Autofail, Elder sign\"\n    ),\n    Hard: toTokens(\n      \"+1, 0, 0, 0, -1, -1, -3, -4, -5, -6, -7, Skull, Skull, Skull, Cultist, Tablet, Elder thing, Autofail, Elder sign\"\n    )\n  },\n  /**\n   * The Labyrinths of Lunacy\n   */\n  TheLabyrinthsOfLunacy: {\n    Standard: toTokens(\n      \"+1, 0, 0, 0, –1, –1, –1, –2, –2, –3, –4, –5, Skull, Skull, Autofail, Elder sign\"\n    ),\n    Hard: toTokens(\n      \"+1, 0, –1, –1, –1, –2, –2, –2, –3, –4, –5, –6, Skull, Skull, Autofail, Elder sign\"\n    )\n  },\n  /**\n   * Guardians of the Abyss\n   */\n  GuardiansOfTheAbyss: {\n    Standard: toTokens(\n      \"+1, +1, 0, 0, -1, -1, -1, -2, -2, -3, -3, -4, -6, Skull, Skull, Skull, Cultist, Tablet, Elder thing, Autofail, Elder sign\"\n    ),\n    Hard: toTokens(\n      \"+1, 0, 0, -1, -1, -1, -2, -2, -2, -3, -3, -4, -4, -5, -7, Skull, Skull, Skull, Cultist, Tablet, Elder thing, Autofail, Elder sign\"\n    )\n  },\n  /**\n   * Guardians of the Abyss\n   */\n  MurderAtTheExcelsiorHotel: {\n    Standard: toTokens(\n      \"+1, 0, -1, -1, -2, -3, -3, -4, Skull, Skull, Cultist, Tablet, Elder thing, Autofail, Elder sign\"\n    ),\n    Hard: toTokens(\n      \"0, -1, -2, -3, -4, -4, -5, -6, Skull, Skull, Cultist, Tablet, Elder thing, Autofail, Elder sign\"\n    )\n  },\n  /**\n   * The Blob That Ate Everything\n   */\n  TheBlobThatAteEverything: {\n    Standard: toTokens(\n      \"+1, 0, 0, 0, -1, -2, -2, -3, -4, -5, Skull, Skull, Cultist, Tablet, Elder thing, Autofail, Elder sign\"\n    ),\n    Hard: toTokens(\n      \"0, 0, 0, -1, -1, -2, -3, -4, -5, -6, Skull, Skull, Cultist, Tablet, Elder thing, Autofail, Elder sign\"\n    )\n  }\n};\n"},"/home/runner/work/arkham-odds/arkham-odds/src/cards.ts":{"language":"typescript","mutants":[{"id":"142","location":{"end":{"column":2,"line":18},"start":{"column":72,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"143","location":{"end":{"column":4,"line":17},"start":{"column":42,"line":15}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"144","location":{"end":{"column":2,"line":43},"start":{"column":20,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"145","location":{"end":{"column":4,"line":42},"start":{"column":42,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"146","location":{"end":{"column":2,"line":67},"start":{"column":78,"line":53}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"147","location":{"end":{"column":4,"line":66},"start":{"column":42,"line":54}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"148","location":{"end":{"column":6,"line":61},"start":{"column":63,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"149","location":{"end":{"column":36,"line":56},"start":{"column":11,"line":56}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"151","location":{"end":{"column":8,"line":58},"start":{"column":38,"line":56}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"150","location":{"end":{"column":36,"line":56},"start":{"column":11,"line":56}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"153","location":{"end":{"column":8,"line":60},"start":{"column":14,"line":58}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"152","location":{"end":{"column":23,"line":57},"start":{"column":22,"line":57}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Survived"},{"id":"155","location":{"end":{"column":2,"line":89},"start":{"column":77,"line":77}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"154","location":{"end":{"column":29,"line":64},"start":{"column":28,"line":64}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Survived"},{"id":"157","location":{"end":{"column":2,"line":124},"start":{"column":20,"line":102}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"156","location":{"end":{"column":4,"line":88},"start":{"column":42,"line":78}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"158","location":{"end":{"column":4,"line":123},"start":{"column":42,"line":103}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"159","location":{"end":{"column":44,"line":104},"start":{"column":9,"line":104}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"160","location":{"end":{"column":44,"line":104},"start":{"column":9,"line":104}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"161","location":{"end":{"column":44,"line":104},"start":{"column":9,"line":104}},"mutatorName":"BooleanLiteral","replacement":"tokensPulled.includes(Token.SKULL)","status":"Killed"},{"id":"162","location":{"end":{"column":6,"line":106},"start":{"column":46,"line":104}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"163","location":{"end":{"column":19,"line":105},"start":{"column":14,"line":105}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"164","location":{"end":{"column":49,"line":108},"start":{"column":32,"line":108}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"RuntimeError"},{"id":"165","location":{"end":{"column":2,"line":182},"start":{"column":17,"line":147}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"166","location":{"end":{"column":4,"line":154},"start":{"column":62,"line":149}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"167","location":{"end":{"column":60,"line":152},"start":{"column":7,"line":151}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"168","location":{"end":{"column":60,"line":152},"start":{"column":7,"line":151}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"169","location":{"end":{"column":60,"line":151},"start":{"column":58,"line":151}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"170","location":{"end":{"column":57,"line":151},"start":{"column":7,"line":151}},"mutatorName":"BooleanLiteral","replacement":"tokenEffects.isSuccess([t], skillMinusDifficulty)","status":"Killed"},{"id":"172","location":{"end":{"column":33,"line":152},"start":{"column":30,"line":152}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"171","location":{"end":{"column":34,"line":151},"start":{"column":31,"line":151}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"174","location":{"end":{"column":6,"line":165},"start":{"column":44,"line":158}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"173","location":{"end":{"column":57,"line":152},"start":{"column":56,"line":152}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"176","location":{"end":{"column":21,"line":159},"start":{"column":11,"line":159}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"175","location":{"end":{"column":21,"line":159},"start":{"column":11,"line":159}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"177","location":{"end":{"column":8,"line":161},"start":{"column":23,"line":159}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"178","location":{"end":{"column":32,"line":160},"start":{"column":31,"line":160}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"179","location":{"end":{"column":8,"line":163},"start":{"column":14,"line":161}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"180","location":{"end":{"column":6,"line":177},"start":{"column":57,"line":171}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"181","location":{"end":{"column":32,"line":172},"start":{"column":11,"line":172}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"182","location":{"end":{"column":32,"line":172},"start":{"column":11,"line":172}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"183","location":{"end":{"column":18,"line":172},"start":{"column":17,"line":172}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"184","location":{"end":{"column":18,"line":172},"start":{"column":17,"line":172}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"185","location":{"end":{"column":8,"line":174},"start":{"column":34,"line":172}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"187","location":{"end":{"column":8,"line":176},"start":{"column":14,"line":174}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"186","location":{"end":{"column":30,"line":173},"start":{"column":16,"line":173}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"RuntimeError"},{"id":"188","location":{"end":{"column":46,"line":175},"start":{"column":16,"line":175}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"RuntimeError"},{"id":"189","location":{"end":{"column":14,"line":178},"start":{"column":5,"line":178}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"190","location":{"end":{"column":2,"line":214},"start":{"column":80,"line":196}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"191","location":{"end":{"column":4,"line":213},"start":{"column":47,"line":199}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"192","location":{"end":{"column":34,"line":200},"start":{"column":9,"line":200}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"193","location":{"end":{"column":34,"line":200},"start":{"column":9,"line":200}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"194","location":{"end":{"column":24,"line":200},"start":{"column":21,"line":200}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"195","location":{"end":{"column":6,"line":206},"start":{"column":36,"line":200}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"196","location":{"end":{"column":67,"line":208},"start":{"column":9,"line":208}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"197","location":{"end":{"column":67,"line":208},"start":{"column":9,"line":208}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"198","location":{"end":{"column":32,"line":208},"start":{"column":30,"line":208}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"199","location":{"end":{"column":24,"line":208},"start":{"column":21,"line":208}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"200","location":{"end":{"column":6,"line":210},"start":{"column":69,"line":208}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"201","location":{"end":{"column":73,"line":209},"start":{"column":72,"line":209}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"202","location":{"end":{"column":6,"line":212},"start":{"column":12,"line":210}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"203","location":{"end":{"column":2,"line":243},"start":{"column":77,"line":224}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"204","location":{"end":{"column":4,"line":242},"start":{"column":42,"line":225}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"205","location":{"end":{"column":57,"line":231},"start":{"column":9,"line":231}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"206","location":{"end":{"column":57,"line":231},"start":{"column":9,"line":231}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"207","location":{"end":{"column":56,"line":231},"start":{"column":30,"line":231}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"208","location":{"end":{"column":6,"line":234},"start":{"column":59,"line":231}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"209","location":{"end":{"column":72,"line":232},"start":{"column":46,"line":232}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"210","location":{"end":{"column":6,"line":236},"start":{"column":12,"line":234}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"212","location":{"end":{"column":2,"line":259},"start":{"column":12,"line":257}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"211","location":{"end":{"column":20,"line":239},"start":{"column":7,"line":239}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"214","location":{"end":{"column":2,"line":272},"start":{"column":75,"line":270}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"213","location":{"end":{"column":63,"line":258},"start":{"column":24,"line":258}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"215","location":{"end":{"column":65,"line":271},"start":{"column":25,"line":271}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"216","location":{"end":{"column":65,"line":271},"start":{"column":33,"line":271}},"mutatorName":"BooleanLiteral","replacement":"elementsSearched.includes(elem)","status":"Killed"},{"id":"217","location":{"end":{"column":2,"line":294},"start":{"column":20,"line":284}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"218","location":{"end":{"column":4,"line":293},"start":{"column":42,"line":285}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"219","location":{"end":{"column":71,"line":291},"start":{"column":7,"line":287}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"220","location":{"end":{"column":71,"line":291},"start":{"column":7,"line":287}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"221","location":{"end":{"column":12,"line":291},"start":{"column":10,"line":291}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"222","location":{"end":{"column":8,"line":291},"start":{"column":36,"line":287}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"223","location":{"end":{"column":2,"line":316},"start":{"column":20,"line":306}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"224","location":{"end":{"column":4,"line":315},"start":{"column":42,"line":307}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"225","location":{"end":{"column":71,"line":313},"start":{"column":7,"line":309}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"226","location":{"end":{"column":71,"line":313},"start":{"column":7,"line":309}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"228","location":{"end":{"column":8,"line":313},"start":{"column":45,"line":309}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"227","location":{"end":{"column":12,"line":313},"start":{"column":10,"line":313}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"229","location":{"end":{"column":2,"line":340},"start":{"column":20,"line":328}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"230","location":{"end":{"column":4,"line":339},"start":{"column":42,"line":329}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"231","location":{"end":{"column":80,"line":337},"start":{"column":7,"line":336}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"232","location":{"end":{"column":80,"line":337},"start":{"column":7,"line":336}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"233","location":{"end":{"column":80,"line":336},"start":{"column":78,"line":336}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"234","location":{"end":{"column":76,"line":336},"start":{"column":30,"line":336}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"235","location":{"end":{"column":2,"line":368},"start":{"column":20,"line":352}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"236","location":{"end":{"column":4,"line":367},"start":{"column":42,"line":353}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"237","location":{"end":{"column":80,"line":365},"start":{"column":7,"line":360}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"238","location":{"end":{"column":80,"line":365},"start":{"column":7,"line":360}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"239","location":{"end":{"column":12,"line":364},"start":{"column":10,"line":364}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"240","location":{"end":{"column":8,"line":364},"start":{"column":39,"line":360}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"241","location":{"end":{"column":2,"line":400},"start":{"column":75,"line":379}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"242","location":{"end":{"column":4,"line":399},"start":{"column":42,"line":380}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"243","location":{"end":{"column":46,"line":381},"start":{"column":9,"line":381}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"244","location":{"end":{"column":46,"line":381},"start":{"column":9,"line":381}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"245","location":{"end":{"column":6,"line":386},"start":{"column":48,"line":381}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"246","location":{"end":{"column":54,"line":383},"start":{"column":29,"line":383}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"247","location":{"end":{"column":54,"line":383},"start":{"column":34,"line":383}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"248","location":{"end":{"column":54,"line":383},"start":{"column":34,"line":383}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"249","location":{"end":{"column":39,"line":383},"start":{"column":36,"line":383}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"250","location":{"end":{"column":6,"line":398},"start":{"column":12,"line":386}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"251","location":{"end":{"column":27,"line":395},"start":{"column":25,"line":395}},"mutatorName":"UnaryOperator","replacement":"+2","status":"Killed"}],"source":"import { Bag } from \"./bag\";\nimport { OutcomeFunction } from \"./OutcomeFunction\";\nimport { BadTokens, Token, TokenEffects } from \"./tokens\";\n\n/**\n * Basically determine success based on difference between skill value and\n * difficulty.\n *\n * @param {number} skillMinusDifficulty The difference between the total skill\n *  value and the difficulty.\n * @return {OutcomeFunction}\n *    An outcome function determining success.\n */\nexport function success(skillMinusDifficulty: number): OutcomeFunction {\n  return (tokensPulled, tokenEffects) => {\n    return tokenEffects.isSuccess(tokensPulled, skillMinusDifficulty);\n  };\n}\n\n/**\n * Determine success when pulling several tokens and choosing the best to\n * resolve and ignore to others.\n *\n * @param {number} skillMinusDifficulty The difference between the total skill\n *  value and the difficulty.\n * @return {OutcomeFunction}\n *    An outcome function determining success.\n */\nexport function successChoosingBest(\n  skillMinusDifficulty: number\n): OutcomeFunction {\n  return (tokensPulled, tokenEffects) => {\n    const { redrawTokens, nonRedrawTokens } = tokenEffects.separateRedrawTokens(\n      tokensPulled\n    );\n    const sorted: Token[] = tokenEffects.sortByBestOutcomeDesc(nonRedrawTokens);\n    const chosen: Token[] = sorted.slice(0, 1);\n    return tokenEffects.isSuccess(\n      chosen.concat(redrawTokens),\n      skillMinusDifficulty\n    );\n  };\n}\n\n/*\n * Determine success when using a single copy of Ritual Candles.\n *\n * @param {number} skillMinusDifficulty The difference between the total skill\n *  value and the difficulty.\n * @return {OutcomeFunction}\n *    An outcome function determining success.\n */\nexport function ritualCandles(skillMinusDifficulty: number): OutcomeFunction {\n  return (tokensPulled, tokenEffects) => {\n    const candleBonus = tokensPulled.reduce((bonus, token) => {\n      if (BadTokens.includes(token)) {\n        return bonus + 1;\n      } else {\n        return bonus;\n      }\n    }, 0);\n    return tokenEffects.isSuccess(\n      tokensPulled,\n      skillMinusDifficulty + candleBonus\n    );\n  };\n}\n\n/**\n * Choose the 2 best tokens.\n *\n * @param {number} skillMinusDifficulty The difference between the total skill\n *  value and the difficulty.\n * @return {OutcomeFunction} An outcome function determining if the two chosen\n *  tokens result in a success.\n */\nexport function oliveMcBride(skillMinusDifficulty: number): OutcomeFunction {\n  return (tokensPulled, tokenEffects) => {\n    const { redrawTokens, nonRedrawTokens } = tokenEffects.separateRedrawTokens(\n      tokensPulled\n    );\n    const sorted: Token[] = tokenEffects.sortByBestOutcomeDesc(nonRedrawTokens);\n    const chosen: Token[] = sorted.slice(0, 2);\n    return tokenEffects.isSuccess(\n      chosen.concat(redrawTokens),\n      skillMinusDifficulty\n    );\n  };\n}\n\n/**\n * Choose a Skull if able and the best of remaining tokens.\n *\n * @param {number} skillMinusDifficulty The difference between the total skill\n *  value and the difficulty.\n * @return {OutcomeFunction} An outcome function determining if the tokens\n *   include a Skull and that this Skull + the best of remaining tokens\n *   result in a success.\n */\nexport function oliveMcBrideWithSkull(\n  skillMinusDifficulty: number\n): OutcomeFunction {\n  return (tokensPulled, tokenEffects) => {\n    if (!tokensPulled.includes(Token.SKULL)) {\n      return false;\n    }\n\n    const copyOfTokensPulled = [...tokensPulled];\n    const skull: Token[] = copyOfTokensPulled.splice(\n      copyOfTokensPulled.indexOf(Token.SKULL),\n      1\n    );\n    const { redrawTokens, nonRedrawTokens } = tokenEffects.separateRedrawTokens(\n      copyOfTokensPulled\n    );\n    const secondToken: Token[] = tokenEffects\n      .sortByBestOutcomeDesc(nonRedrawTokens)\n      .slice(0, 1);\n    return tokenEffects.isSuccess(\n      skull.concat(secondToken, redrawTokens),\n      skillMinusDifficulty\n    );\n  };\n}\n\n/**\n * Choose the right token to call with Recall the Future which is, among tokens\n * that can be turned to success using the +2 bonus, the one which has the most\n * occurrences in the bag.\n * Note that it will take into account redraw tokens. For example, when testing\n * at -2, it will not choose -3 even though there is a Bless token (+2, redraw)\n * in the bag.\n *\n * @param {number} skillMinusDifficulty\n *   value and the difficulty.\n * @param {Bag} bag\n *   The Chaos bag\n * @param {TokenEffects} tokenEffects\n *   The token effects mapping.\n * @return {Token | null}\n *   The best token to call or `null` if there is none.\n */\nfunction chooseTokenForRecallTheFuture(\n  skillMinusDifficulty: number,\n  bag: Bag,\n  tokenEffects: TokenEffects\n): Token | null {\n  // Get tokens that can be turned to successes\n  const canBeTurnedToSuccesses = bag.getTokens().filter(t => {\n    return (\n      !tokenEffects.isSuccess([t], skillMinusDifficulty) &&\n      tokenEffects.isSuccess([t], skillMinusDifficulty + 2)\n    );\n  });\n\n  // Counting them\n  const countByToken = canBeTurnedToSuccesses.reduce(\n    (acc: Map<Token, number>, t: Token) => {\n      if (acc.has(t)) {\n        acc.set(t, acc.get(t) + 1);\n      } else {\n        acc.set(t, 1);\n      }\n      return acc;\n    },\n    new Map<Token, number>()\n  );\n\n  // Choosing the one with the most occurrences\n  const chosenToken: Token | null = Array.from(countByToken.entries()).reduce(\n    ([previousToken, previousCount], [token, count]) => {\n      if (count > previousCount) {\n        return [token, count];\n      } else {\n        return [previousToken, previousCount];\n      }\n    },\n    [null, 0]\n  )[0];\n\n  return chosenToken;\n}\n\n/**\n * Determine success using Recall the Future.\n * The strategy applied for Recall the Future is the following :\n * - determine which tokens can be turned from failure to success using the\n *   +2 bonus from Recall the Future\n * - choose the token with the most occurrences in the bag\n *\n * @param {number} skillMinusDifficulty The difference between the total skill\n *  value and the difficulty.\n * @return {OutcomeFunction}\n *    An outcome function determining success.\n */\nexport function recallTheFuture(skillMinusDifficulty: number): OutcomeFunction {\n  let chosenToken: Token | null | undefined;\n\n  return (tokensPulled, tokenEffects, bag) => {\n    if (chosenToken === undefined) {\n      chosenToken = chooseTokenForRecallTheFuture(\n        skillMinusDifficulty,\n        bag,\n        tokenEffects\n      );\n    }\n\n    if (chosenToken !== null && tokensPulled.includes(chosenToken)) {\n      return tokenEffects.isSuccess(tokensPulled, skillMinusDifficulty + 2);\n    } else {\n      return tokenEffects.isSuccess(tokensPulled, skillMinusDifficulty);\n    }\n  };\n}\n\n/**\n * Determine success using Dark Prophecy.\n *\n * @param {number} skillMinusDifficulty The difference between the total skill\n *  value and the difficulty.\n * @return {OutcomeFunction}\n *    An outcome function determining success.\n */\nexport function darkProphecy(skillMinusDifficulty: number): OutcomeFunction {\n  return (tokensPulled, tokenEffects) => {\n    let chosenToken: Token;\n    const { redrawTokens, nonRedrawTokens } = tokenEffects.separateRedrawTokens(\n      tokensPulled\n    );\n\n    if (nonRedrawTokens.some(t => BadTokens.includes(t))) {\n      const onlyBad = nonRedrawTokens.filter(t => BadTokens.includes(t));\n      chosenToken = tokenEffects.sortByBestOutcomeDesc(onlyBad)[0];\n    } else {\n      chosenToken = tokenEffects.sortByBestOutcomeDesc(nonRedrawTokens)[0];\n    }\n\n    return tokenEffects.isSuccess(\n      [chosenToken].concat(redrawTokens),\n      skillMinusDifficulty\n    );\n  };\n}\n\n/**\n * Check if a list of elements contains at least one of the elements provided as\n * second argument.\n *\n * @param {T[]} elements The list of elements to check.\n * @param {T[]} elementsSearched The list of elements to look for.\n * @return {boolean} True if the list provided as first argument contains at\n *  least one of the elements provided as second argument.\n */\nfunction containsAtLeastOneAmong<T>(\n  elements: T[],\n  elementsSearched: T[]\n): boolean {\n  return elements.some(elem => elementsSearched.includes(elem));\n}\n\n/**\n * Check if a list of elements does not contains any of the elements provided as\n * second argument.\n *\n * @param {T[]} elements The list of elements to check.\n * @param {T[]} elementsSearched The list of elements to look for.\n * @return {boolean} True if the list provided as first argument does contains\n *  not contain any of the elements provided as second argument.\n */\nfunction containsNoneOf<T>(elements: T[], elementsSearched: T[]): boolean {\n  return elements.every(elem => !elementsSearched.includes(elem));\n}\n\n/**\n * Determine success and doing exactly 1 damage using .35 Winchester.\n *\n * @param {number} skillMinusDifficulty The difference between the total skill\n *  value and the difficulty.\n * @return {OutcomeFunction}\n *    An outcome function determining success.\n */\nexport function winchesterDoing1Damage(\n  skillMinusDifficulty: number\n): OutcomeFunction {\n  return (tokensPulled, tokenEffects) => {\n    return (\n      containsNoneOf(tokensPulled, [\n        Token.ELDER_SIGN,\n        Token.PLUS_ONE,\n        Token.ZERO\n      ]) && tokenEffects.isSuccess(tokensPulled, skillMinusDifficulty)\n    );\n  };\n}\n\n/**\n * Determine success and doing exactly 3 damage using .35 Winchester.\n *\n * @param {number} skillMinusDifficulty The difference between the total skill\n *  value and the difficulty.\n * @return {OutcomeFunction}\n *    An outcome function determining success.\n */\nexport function winchesterDoing3Damage(\n  skillMinusDifficulty: number\n): OutcomeFunction {\n  return (tokensPulled, tokenEffects) => {\n    return (\n      containsAtLeastOneAmong(tokensPulled, [\n        Token.ELDER_SIGN,\n        Token.PLUS_ONE,\n        Token.ZERO\n      ]) && tokenEffects.isSuccess(tokensPulled, skillMinusDifficulty)\n    );\n  };\n}\n\n/**\n * Determine success and doing exactly 3 damage using .35 Winchester and Olive McBride.\n *\n * @param {number} skillMinusDifficulty The difference between the total skill\n *  value and the difficulty.\n * @return {OutcomeFunction}\n *    An outcome function determining success.\n */\nexport function oliveMcBrideAndWinchesterDoing1Damage(\n  skillMinusDifficulty: number\n): OutcomeFunction {\n  return (tokensPulled, tokenEffects) => {\n    const { redrawTokens, nonRedrawTokens } = tokenEffects.separateRedrawTokens(\n      tokensPulled\n    );\n    const sorted: Token[] = tokenEffects.sortByBestOutcomeDesc(nonRedrawTokens);\n    const chosen: Token[] = sorted.slice(0, 2);\n    return (\n      containsNoneOf(chosen, [Token.ELDER_SIGN, Token.PLUS_ONE, Token.ZERO]) &&\n      tokenEffects.isSuccess(chosen.concat(redrawTokens), skillMinusDifficulty)\n    );\n  };\n}\n\n/**\n * Determine success and doing exactly 3 damage using .35 Winchester and Olive McBride.\n *\n * @param {number} skillMinusDifficulty The difference between the total skill\n *  value and the difficulty.\n * @return {OutcomeFunction}\n *    An outcome function determining success.\n */\nexport function oliveMcBrideAndWinchesterDoing3Damage(\n  skillMinusDifficulty: number\n): OutcomeFunction {\n  return (tokensPulled, tokenEffects) => {\n    const { redrawTokens, nonRedrawTokens } = tokenEffects.separateRedrawTokens(\n      tokensPulled\n    );\n    const sorted: Token[] = tokenEffects.sortByBestOutcomeDesc(nonRedrawTokens);\n    const chosen: Token[] = sorted.slice(0, 2);\n    return (\n      containsAtLeastOneAmong(chosen, [\n        Token.ELDER_SIGN,\n        Token.PLUS_ONE,\n        Token.ZERO\n      ]) &&\n      tokenEffects.isSuccess(chosen.concat(redrawTokens), skillMinusDifficulty)\n    );\n  };\n}\n\n/**\n * Determine success using Jacqueline Fine's ability to draw 3 tokens and cancel\n * 2 non-tentacle tokens or a tentacle token.\n *\n * @param {number} skillMinusDifficulty The difference between the total skill\n *  value and the difficulty.\n * @return {OutcomeFunction}\n *    An outcome function determining success.\n */\nexport function jacqueline(skillMinusDifficulty: number): OutcomeFunction {\n  return (tokensPulled, tokenEffects) => {\n    if (tokensPulled.includes(Token.AUTOFAIL)) {\n      return tokenEffects.isSuccess(\n        tokensPulled.filter(t => t !== Token.AUTOFAIL),\n        skillMinusDifficulty\n      );\n    } else {\n      const {\n        redrawTokens,\n        nonRedrawTokens\n      } = tokenEffects.separateRedrawTokens(tokensPulled);\n      const sorted: Token[] = tokenEffects.sortByBestOutcomeDesc(\n        nonRedrawTokens\n      );\n      return tokenEffects.isSuccess(\n        sorted.slice(0, -2).concat(redrawTokens),\n        skillMinusDifficulty\n      );\n    }\n  };\n}\n"},"/home/runner/work/arkham-odds/arkham-odds/src/index.ts":{"language":"typescript","mutants":[{"id":"252","location":{"end":{"column":2,"line":53},"start":{"column":13,"line":46}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"254","location":{"end":{"column":67,"line":48},"start":{"column":66,"line":48}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Killed"},{"id":"253","location":{"end":{"column":51,"line":49},"start":{"column":50,"line":49}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Killed"},{"id":"255","location":{"end":{"column":36,"line":48},"start":{"column":35,"line":48}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"256","location":{"end":{"column":46,"line":49},"start":{"column":45,"line":49}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"257","location":{"end":{"column":2,"line":144},"start":{"column":19,"line":76}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"258","location":{"end":{"column":46,"line":77},"start":{"column":44,"line":77}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"RuntimeError"},{"id":"259","location":{"end":{"column":15,"line":78},"start":{"column":7,"line":78}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"260","location":{"end":{"column":15,"line":78},"start":{"column":7,"line":78}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"261","location":{"end":{"column":4,"line":96},"start":{"column":17,"line":78}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"262","location":{"end":{"column":52,"line":81},"start":{"column":15,"line":81}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"263","location":{"end":{"column":53,"line":84},"start":{"column":15,"line":84}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"264","location":{"end":{"column":53,"line":84},"start":{"column":20,"line":84}},"mutatorName":"BooleanLiteral","replacement":"outcomes.getEffect(t).isRedraw()","status":"Killed"},{"id":"265","location":{"end":{"column":26,"line":95},"start":{"column":11,"line":95}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"266","location":{"end":{"column":4,"line":98},"start":{"column":10,"line":96}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"268","location":{"end":{"column":6,"line":110},"start":{"column":16,"line":101}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"RuntimeError"},{"id":"267","location":{"end":{"column":7,"line":110},"start":{"column":5,"line":101}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"269","location":{"end":{"column":73,"line":106},"start":{"column":27,"line":106}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"270","location":{"end":{"column":73,"line":106},"start":{"column":36,"line":106}},"mutatorName":"BooleanLiteral","replacement":"outcomes.getEffect(token).isRedraw()","status":"Killed"},{"id":"271","location":{"end":{"column":6,"line":141},"start":{"column":80,"line":114}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"272","location":{"end":{"column":43,"line":115},"start":{"column":11,"line":115}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"273","location":{"end":{"column":43,"line":115},"start":{"column":11,"line":115}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"274","location":{"end":{"column":41,"line":115},"start":{"column":38,"line":115}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"275","location":{"end":{"column":8,"line":117},"start":{"column":45,"line":115}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"277","location":{"end":{"column":8,"line":140},"start":{"column":14,"line":117}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"276","location":{"end":{"column":36,"line":116},"start":{"column":16,"line":116}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"278","location":{"end":{"column":73,"line":120},"start":{"column":11,"line":120}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"279","location":{"end":{"column":42,"line":122},"start":{"column":13,"line":122}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"281","location":{"end":{"column":39,"line":122},"start":{"column":38,"line":122}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"280","location":{"end":{"column":42,"line":122},"start":{"column":13,"line":122}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"282","location":{"end":{"column":39,"line":122},"start":{"column":38,"line":122}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"283","location":{"end":{"column":42,"line":122},"start":{"column":40,"line":122}},"mutatorName":"UnaryOperator","replacement":"+1","status":"Killed"},{"id":"284","location":{"end":{"column":10,"line":136},"start":{"column":44,"line":122}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"285","location":{"end":{"column":12,"line":129},"start":{"column":38,"line":124}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"RuntimeError"},{"id":"286","location":{"end":{"column":10,"line":139},"start":{"column":16,"line":136}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"288","location":{"end":{"column":7,"line":142},"start":{"column":5,"line":142}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"RuntimeError"},{"id":"287","location":{"end":{"column":62,"line":138},"start":{"column":18,"line":138}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"289","location":{"end":{"column":2,"line":174},"start":{"column":40,"line":167}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"291","location":{"end":{"column":6,"line":172},"start":{"column":22,"line":169}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"RuntimeError"},{"id":"290","location":{"end":{"column":7,"line":172},"start":{"column":5,"line":169}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"292","location":{"end":{"column":2,"line":243},"start":{"column":14,"line":224}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"293","location":{"end":{"column":4,"line":233},"start":{"column":67,"line":231}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"294","location":{"end":{"column":51,"line":239},"start":{"column":7,"line":238}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"295","location":{"end":{"column":2,"line":285},"start":{"column":14,"line":277}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"296","location":{"end":{"column":30,"line":279},"start":{"column":8,"line":279}},"mutatorName":"ArrayDeclaration","replacement":"Array()","status":"Killed"},{"id":"297","location":{"end":{"column":4,"line":283},"start":{"column":54,"line":281}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"298","location":{"end":{"column":47,"line":284},"start":{"column":46,"line":284}},"mutatorName":"ArithmeticOperator","replacement":"*","status":"Killed"}],"source":"import { Bag } from \"./bag\";\nimport { Fraction } from \"./Fraction\";\nimport { OutcomeFunction } from \"./OutcomeFunction\";\nimport { Token, TokenEffects } from \"./tokens\";\nimport {\n  allCombinations,\n  arrayEquals,\n  cartesianProduct,\n  combinations,\n  factorial,\n  flatten,\n  replace\n} from \"./utils\";\n\ninterface PullWithOdds {\n  tokens: Token[];\n  odds: Fraction;\n}\n\nexport type OddsFn = (\n  numTokensPulled: number,\n  bag: Bag,\n  outcomes: TokenEffects,\n  outcomeFunction: OutcomeFunction\n) => number;\n\n/**\n * Compute the odds of a particular combination of tokens based on how many\n * tokens are not \"redraw\" tokens.\n * It took me a lot of time to get this formula right. Many thanks to those who\n * helped me get it.\n *\n * @param {number} totalNumberOfTokens\n *   The total number of tokens in the bag\n * @param {number} numberOfTokensInCombination\n *   The number of tokens in the combination\n * @param {number} numberOfNonRedrawTokensInCombination\n *   The number of tokens in this combination that are not \"redraw\" tokens\n * @return {number}\n *   The odds of this combination\n */\nfunction oddsOfCombination(\n  totalNumberOfTokens: number,\n  numberOfTokensInCombination: number,\n  numberOfNonRedrawTokensInCombination: number\n): Fraction {\n  return new Fraction(\n    factorial(totalNumberOfTokens - numberOfTokensInCombination) *\n      factorial(numberOfTokensInCombination - 1) *\n      numberOfNonRedrawTokensInCombination,\n    factorial(totalNumberOfTokens)\n  );\n}\n\n/**\n * Return all possible sets of n tokens that can be pulled from the bag along\n * with the odds of pullingthis particular set among all possible sets.\n * For exemple, if drawing only 1 token from a bag containing only a +1 token\n * and 2 -1 token, the result will be:\n *  * +1 with a 0.33 odds\n *  * -1 with a 0.66 odds\n *\n * @param {number} numTokensPulled\n *   The number of tokens simultaneously pulled from the bag.\n * @param {Bag} bag\n *   The bag from which the tokens are pulled.\n * @param {TokenEffects} outcomes\n *   The token effects if needed (which is true if some of them have redraw effects).\n * @return {PullWithOdds[]}\n *   The list of possible pulls along with their odds as fractions.\n */\nfunction getPossiblePullsWithOdds(\n  numTokensPulled: number,\n  bag: Bag,\n  outcomes?: TokenEffects\n): PullWithOdds[] {\n  let allPossibleCombinations: Token[][] = [];\n  if (outcomes) {\n    const tokensWithRedraw = bag\n      .getTokens()\n      .filter(t => outcomes.getEffect(t).isRedraw());\n    const tokensWithoutRedraw = bag\n      .getTokens()\n      .filter(t => !outcomes.getEffect(t).isRedraw());\n\n    const combinationsOfRedrawTokens = allCombinations(tokensWithRedraw);\n    const combinationsOfNonRedrawTokens = combinations(\n      numTokensPulled,\n      tokensWithoutRedraw\n    );\n\n    allPossibleCombinations = cartesianProduct(\n      combinationsOfRedrawTokens,\n      combinationsOfNonRedrawTokens\n    ).map(c => flatten(c));\n  } else {\n    allPossibleCombinations = combinations(numTokensPulled, bag.getTokens());\n  }\n\n  const allCombinationsWithOdds: PullWithOdds[] = allPossibleCombinations.map(\n    tokens => ({\n      odds: oddsOfCombination(\n        bag.getTokens().length,\n        tokens.length,\n        outcomes\n          ? tokens.filter(token => !outcomes.getEffect(token).isRedraw()).length\n          : tokens.length\n      ),\n      tokens: tokens.sort()\n    })\n  );\n\n  return allCombinationsWithOdds.reduce(\n    (reducedCombinations: PullWithOdds[], currentCombination: PullWithOdds) => {\n      if (reducedCombinations.length === 0) {\n        return [currentCombination];\n      } else {\n        // Find a combination with the same set of tokens\n        const matchingCombinationIndex = reducedCombinations.findIndex(\n          ({ tokens }) => arrayEquals(tokens, currentCombination.tokens)\n        );\n        if (matchingCombinationIndex > -1) {\n          // Update the existing combination by adding the odds\n          const updatedCombination = {\n            odds: reducedCombinations[matchingCombinationIndex].odds.add(\n              currentCombination.odds\n            ),\n            tokens: reducedCombinations[matchingCombinationIndex].tokens\n          };\n\n          return replace(\n            reducedCombinations,\n            matchingCombinationIndex,\n            updatedCombination\n          );\n        } else {\n          // Add the combination\n          return [...reducedCombinations, currentCombination];\n        }\n      }\n    },\n    []\n  );\n}\n\n/**\n * Return all possible sets of n tokens that can be pulled from the bag along\n * with the odds of pullingthis particular set among all possible sets.\n * For exemple, if drawing only 1 token from a bag containing only a +1 token\n * and 2 -1 token, the result will be:\n *  * +1 with a 0.33 odds\n *  * -1 with a 0.66 odds\n *\n * @param {number} numTokensPulled\n *   The number of tokens simultaneously pulled from the bag.\n * @param {Bag} bag\n *   The bag from which the tokens are pulled.\n * @param {TokenEffects} outcomes\n *   The token effects if needed (which is true if some of them have redraw effects).\n * @return {{ tokens: Token[]; odds: number }[]}\n *   The list of possible pulls along with their odds.\n */\nexport function drawFromBag(\n  numTokensPulled: number,\n  bag: Bag,\n  outcomes?: TokenEffects\n): { tokens: Token[]; odds: number }[] {\n  return getPossiblePullsWithOdds(numTokensPulled, bag, outcomes).map(\n    pullWithOdds => ({\n      odds: pullWithOdds.odds.valueOf(),\n      tokens: pullWithOdds.tokens\n    })\n  );\n}\n\n/**\n * Compute the odds of a particular outcome when pulling tokens from the bag.\n *\n * The outcome function is called for each possible combination of `numTokens`\n * from the bag and return `true` or `false` wether this specific combination\n * is a success or not. This function is called with first argument being the\n * combination (it will contain exactly `numTokens` tokens), second optional\n * argument being the effects of the tokens and third optional argument being\n * the Chaos bag.\n *\n * The simplest outcome function is checking if a particular token was pulled:\n *\n * ```javascript\n * function pulledASkull(tokensPulled) {\n *   return tokensPulled[0] === ArkhamOdds.Token.SKULL;\n * }\n * ```\n *\n * Using the token effects mapping, you can check if the skill test is a\n * success when the total skil vallue is 2 above the difficulty.\n *\n * ```javascript\n * function isSuccessWhenTwoAbove(tokensPulled, tokenEffects) {\n *   return tokenEffects.isSuccess(tokensPulled, 2);\n * }\n * ```\n *\n * @param {number} numTokensPulled\n *   The number of tokens simultaneously pulled from the bag.\n * @param {Bag} bag\n *   The bag from which the tokens are pulled.\n * @param {TokenEffects} outcomes\n *   The token effects.\n * @param {OutcomeFunction} outcomeFunction\n *   The outcome function returning `true` if the pulled tokens represent a\n *   desired outcome and `false` otherwise.\n *   The first argument passed to the function are the tokens pulled, the second\n *   is the token effects map and the third is the bag.\n *   The outcome function should always assume that redraw tokens are counted\n *   and that pulled tokens contains the result of redrawing.\n * @return {number}\n *   The odds of the desired outcome.\n */\nexport const odds: OddsFn = (\n  numTokensPulled: number,\n  bag: Bag,\n  outcomes: TokenEffects,\n  outcomeFunction: OutcomeFunction\n): number => {\n  const possiblePullsWithOdds = getPossiblePullsWithOdds(\n    numTokensPulled,\n    bag,\n    outcomes\n  );\n\n  const filterCondition = (possiblePullWithOdds: PullWithOdds) => {\n    return outcomeFunction(possiblePullWithOdds.tokens, outcomes, bag);\n  };\n\n  return possiblePullsWithOdds\n    .filter(filterCondition)\n    .reduce(\n      (totalOdds, successfulPullWithOdds) =>\n        totalOdds.add(successfulPullWithOdds.odds),\n      new Fraction(0, 1)\n    )\n    .valueOf();\n};\n\n/**\n * Similar to `odds` but this time putting tokens back into the bag between\n * each pull.\n *\n * It should be used for abilities like Wendy's:\n *\n * ```javascript\n * let wendyOdds = ArkhamOdds.oddsWithRedraw(\n *   2, theBag, theEffects,\n *   ArkhamOdds.successChoosingBest(0));\n * ```\n *\n * TODO Update this function to account for tokens with a redraw effect.\n *\n * @param {number} numTokensPulled\n *   The number of tokens sequentially pulled from the bag while putting them\n *   back in between each pull..\n * @param {Bag} bag\n *   The bag from which the tokens are pulled.\n * @param {OutcomeFunction} outcomeFunction\n *   The outcome function returning `true` if the pulled tokens represent a\n *   desired outcome and `false` otherwise.\n *   The first argument passed to the function are the tokens pulled, the second\n *   is the token effects map and the third is the bag.\n * @return {number}\n *   The odds of the desired outcome.\n */\nexport const oddsWithRedraw: OddsFn = (\n  numTokensPulled: number,\n  bag: Bag,\n  outcomes: TokenEffects,\n  outcomeFunction: OutcomeFunction\n): number => {\n  const comb: Token[][] = cartesianProduct(\n    ...Array(numTokensPulled).fill(bag.getTokens())\n  );\n  const filterCondition = (tokensPulled: Token[]) => {\n    return outcomeFunction(tokensPulled, outcomes, bag);\n  };\n  return comb.filter(filterCondition).length / comb.length;\n};\n\nexport * from \"./bag\";\nexport * from \"./cards\";\nexport * from \"./tokens\";\nexport * from \"./OutcomeFunction\";\n"},"/home/runner/work/arkham-odds/arkham-odds/src/tokens/Autofail.ts":{"language":"typescript","mutants":[{"id":"299","location":{"end":{"column":4,"line":10},"start":{"column":23,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"300","location":{"end":{"column":4,"line":14},"start":{"column":21,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"301","location":{"end":{"column":17,"line":13},"start":{"column":12,"line":13}},"mutatorName":"BooleanLiteral","replacement":"true","status":"RuntimeError"},{"id":"302","location":{"end":{"column":4,"line":18},"start":{"column":46,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"304","location":{"end":{"column":37,"line":17},"start":{"column":12,"line":17}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"},{"id":"303","location":{"end":{"column":37,"line":17},"start":{"column":12,"line":17}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"}],"source":"import { TokenEffect } from \"./TokenEffect\";\nimport { TokenEffectType } from \"./TokenEffectType\";\n\n/**\n * A token effect that is an autofail.\n */\nexport class Autofail implements TokenEffect {\n  public getOutcome() {\n    return TokenEffectType.AUTOFAIL;\n  }\n\n  public isRedraw() {\n    return false;\n  }\n\n  public sameAs(other: TokenEffect): boolean {\n    return other instanceof Autofail;\n  }\n}\n"},"/home/runner/work/arkham-odds/arkham-odds/src/tokens/Autosuccess.ts":{"language":"typescript","mutants":[{"id":"305","location":{"end":{"column":4,"line":10},"start":{"column":23,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"306","location":{"end":{"column":4,"line":14},"start":{"column":21,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"307","location":{"end":{"column":17,"line":13},"start":{"column":12,"line":13}},"mutatorName":"BooleanLiteral","replacement":"true","status":"RuntimeError"},{"id":"308","location":{"end":{"column":4,"line":18},"start":{"column":46,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"309","location":{"end":{"column":40,"line":17},"start":{"column":12,"line":17}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError"},{"id":"310","location":{"end":{"column":40,"line":17},"start":{"column":12,"line":17}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"}],"source":"import { TokenEffect } from \"./TokenEffect\";\nimport { TokenEffectType } from \"./TokenEffectType\";\n\n/**\n * A token effect that is an autosuccess.\n */\nexport class Autosuccess implements TokenEffect {\n  public getOutcome() {\n    return TokenEffectType.AUTOSUCCESS;\n  }\n\n  public isRedraw() {\n    return false;\n  }\n\n  public sameAs(other: TokenEffect): boolean {\n    return other instanceof Autosuccess;\n  }\n}\n"},"/home/runner/work/arkham-odds/arkham-odds/src/tokens/Modifier.ts":{"language":"typescript","mutants":[{"id":"312","location":{"end":{"column":4,"line":17},"start":{"column":48,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"313","location":{"end":{"column":4,"line":21},"start":{"column":40,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"314","location":{"end":{"column":4,"line":25},"start":{"column":21,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"315","location":{"end":{"column":4,"line":35},"start":{"column":29,"line":33}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"316","location":{"end":{"column":4,"line":46},"start":{"column":46,"line":37}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"317","location":{"end":{"column":34,"line":38},"start":{"column":9,"line":38}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"},{"id":"311","location":{"end":{"column":46,"line":14},"start":{"column":41,"line":14}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"318","location":{"end":{"column":34,"line":38},"start":{"column":9,"line":38}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError"},{"id":"320","location":{"end":{"column":59,"line":41},"start":{"column":9,"line":40}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError"},{"id":"319","location":{"end":{"column":6,"line":43},"start":{"column":36,"line":38}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"321","location":{"end":{"column":59,"line":41},"start":{"column":9,"line":40}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"},{"id":"323","location":{"end":{"column":59,"line":40},"start":{"column":9,"line":40}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError"},{"id":"324","location":{"end":{"column":59,"line":40},"start":{"column":9,"line":40}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"},{"id":"325","location":{"end":{"column":28,"line":40},"start":{"column":25,"line":40}},"mutatorName":"EqualityOperator","replacement":"!==","status":"RuntimeError"},{"id":"326","location":{"end":{"column":59,"line":41},"start":{"column":9,"line":41}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError"},{"id":"327","location":{"end":{"column":59,"line":41},"start":{"column":9,"line":41}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"},{"id":"328","location":{"end":{"column":28,"line":41},"start":{"column":25,"line":41}},"mutatorName":"EqualityOperator","replacement":"!==","status":"RuntimeError"},{"id":"329","location":{"end":{"column":6,"line":45},"start":{"column":12,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"330","location":{"end":{"column":19,"line":44},"start":{"column":14,"line":44}},"mutatorName":"BooleanLiteral","replacement":"true","status":"RuntimeError"},{"id":"322","location":{"end":{"column":62,"line":40},"start":{"column":60,"line":40}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"}],"source":"import { TokenEffect } from \"./TokenEffect\";\nimport { TokenEffectType } from \"./TokenEffectType\";\n\n/**\n * A token effect that modify the skill value for the test.\n */\nexport class Modifier implements TokenEffect {\n  private _value: number;\n  private _isRedraw: boolean;\n\n  /**\n   * Create a new modifier given the modifier value.\n   */\n  constructor(value: number, isRedraw = false) {\n    this._value = value;\n    this._isRedraw = isRedraw;\n  }\n\n  public getOutcome(): TokenEffectType {\n    return TokenEffectType.MODIFIER;\n  }\n\n  public isRedraw() {\n    return this._isRedraw;\n  }\n\n  /**\n   * Get the value of this modifier effect.\n   *\n   * @return {number}\n   *   The value of this modifier effect.\n   */\n  public getValue(): number {\n    return this._value;\n  }\n\n  public sameAs(other: TokenEffect): boolean {\n    if (other instanceof Modifier) {\n      return (\n        this.getValue() === (other as Modifier).getValue() &&\n        this.isRedraw() === (other as Modifier).isRedraw()\n      );\n    } else {\n      return false;\n    }\n  }\n}\n"},"/home/runner/work/arkham-odds/arkham-odds/src/tokens/Token.ts":{"language":"typescript","mutants":[{"id":"331","location":{"end":{"column":28,"line":5},"start":{"column":16,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"333","location":{"end":{"column":13,"line":7},"start":{"column":10,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"334","location":{"end":{"column":19,"line":8},"start":{"column":15,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"332","location":{"end":{"column":18,"line":6},"start":{"column":14,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"335","location":{"end":{"column":19,"line":9},"start":{"column":15,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"337","location":{"end":{"column":20,"line":11},"start":{"column":16,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"338","location":{"end":{"column":20,"line":12},"start":{"column":16,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"336","location":{"end":{"column":21,"line":10},"start":{"column":17,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"339","location":{"end":{"column":19,"line":13},"start":{"column":15,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"341","location":{"end":{"column":21,"line":15},"start":{"column":17,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"342","location":{"end":{"column":18,"line":16},"start":{"column":11,"line":16}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"340","location":{"end":{"column":21,"line":14},"start":{"column":17,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"343","location":{"end":{"column":22,"line":17},"start":{"column":13,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"345","location":{"end":{"column":30,"line":19},"start":{"column":17,"line":19}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"346","location":{"end":{"column":24,"line":20},"start":{"column":14,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"347","location":{"end":{"column":18,"line":21},"start":{"column":11,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"344","location":{"end":{"column":20,"line":18},"start":{"column":12,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"349","location":{"end":{"column":2,"line":34},"start":{"column":26,"line":28}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"RuntimeError"},{"id":"348","location":{"end":{"column":18,"line":22},"start":{"column":11,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"}],"source":"/**\n * Enumeration representing all available tokens faces.\n */\nexport enum Token {\n  ELDER_SIGN = \"Elder sign\",\n  PLUS_ONE = \"+1\",\n  ZERO = \"0\",\n  MINUS_ONE = \"-1\",\n  MINUS_TWO = \"-2\",\n  MINUS_THREE = \"-3\",\n  MINUS_FOUR = \"-4\",\n  MINUS_FIVE = \"-5\",\n  MINUS_SIX = \"-6\",\n  MINUS_SEVEN = \"-7\",\n  MINUS_EIGHT = \"-8\",\n  SKULL = \"Skull\",\n  CULTIST = \"Cultist\",\n  TABLET = \"Tablet\",\n  ELDER_THING = \"Elder thing\",\n  AUTOFAIL = \"Autofail\",\n  BLESS = \"Bless\",\n  CURSE = \"Curse\"\n}\n\n/**\n * List of 'bad' tokens, tokens generally triggering bad effects.\n */\nexport const BadTokens = [\n  Token.SKULL,\n  Token.CULTIST,\n  Token.TABLET,\n  Token.ELDER_THING,\n  Token.AUTOFAIL\n];\n"},"/home/runner/work/arkham-odds/arkham-odds/src/tokens/TokenEffects.ts":{"language":"typescript","mutants":[{"id":"351","location":{"end":{"column":17,"line":16},"start":{"column":9,"line":16}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"},{"id":"352","location":{"end":{"column":17,"line":16},"start":{"column":9,"line":16}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError"},{"id":"350","location":{"end":{"column":4,"line":21},"start":{"column":48,"line":15}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"353","location":{"end":{"column":6,"line":18},"start":{"column":19,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"355","location":{"end":{"column":4,"line":33},"start":{"column":47,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"356","location":{"end":{"column":4,"line":54},"start":{"column":69,"line":46}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"354","location":{"end":{"column":6,"line":20},"start":{"column":12,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"357","location":{"end":{"column":4,"line":74},"start":{"column":67,"line":64}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"359","location":{"end":{"column":4,"line":94},"start":{"column":58,"line":85}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"360","location":{"end":{"column":6,"line":89},"start":{"column":42,"line":87}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"361","location":{"end":{"column":6,"line":92},"start":{"column":50,"line":90}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"358","location":{"end":{"column":6,"line":68},"start":{"column":43,"line":66}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"362","location":{"end":{"column":4,"line":106},"start":{"column":52,"line":104}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"364","location":{"end":{"column":77,"line":105},"start":{"column":12,"line":105}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"},{"id":"365","location":{"end":{"column":49,"line":105},"start":{"column":46,"line":105}},"mutatorName":"EqualityOperator","replacement":"!==","status":"RuntimeError"},{"id":"366","location":{"end":{"column":4,"line":118},"start":{"column":49,"line":116}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"363","location":{"end":{"column":77,"line":105},"start":{"column":12,"line":105}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"367","location":{"end":{"column":74,"line":117},"start":{"column":12,"line":117}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError"},{"id":"369","location":{"end":{"column":49,"line":117},"start":{"column":46,"line":117}},"mutatorName":"EqualityOperator","replacement":"!==","status":"RuntimeError"},{"id":"370","location":{"end":{"column":4,"line":134},"start":{"column":49,"line":129}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"371","location":{"end":{"column":71,"line":130},"start":{"column":9,"line":130}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"},{"id":"368","location":{"end":{"column":74,"line":117},"start":{"column":12,"line":117}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"372","location":{"end":{"column":71,"line":130},"start":{"column":9,"line":130}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError"},{"id":"374","location":{"end":{"column":6,"line":132},"start":{"column":73,"line":130}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"375","location":{"end":{"column":61,"line":131},"start":{"column":27,"line":131}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"373","location":{"end":{"column":46,"line":130},"start":{"column":43,"line":130}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"376","location":{"end":{"column":4,"line":163},"start":{"column":58,"line":144}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"377","location":{"end":{"column":6,"line":162},"start":{"column":58,"line":145}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"378","location":{"end":{"column":28,"line":146},"start":{"column":11,"line":146}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"},{"id":"380","location":{"end":{"column":21,"line":146},"start":{"column":18,"line":146}},"mutatorName":"EqualityOperator","replacement":"!==","status":"RuntimeError"},{"id":"381","location":{"end":{"column":8,"line":148},"start":{"column":30,"line":146}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"382","location":{"end":{"column":78,"line":149},"start":{"column":11,"line":149}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"},{"id":"379","location":{"end":{"column":28,"line":146},"start":{"column":11,"line":146}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"383","location":{"end":{"column":78,"line":149},"start":{"column":11,"line":149}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError"},{"id":"385","location":{"end":{"column":78,"line":149},"start":{"column":46,"line":149}},"mutatorName":"BooleanLiteral","replacement":"this.isTokenAutoSuccess(tokenB)","status":"RuntimeError"},{"id":"386","location":{"end":{"column":8,"line":151},"start":{"column":80,"line":149}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"387","location":{"end":{"column":18,"line":150},"start":{"column":16,"line":150}},"mutatorName":"UnaryOperator","replacement":"+1","status":"RuntimeError"},{"id":"384","location":{"end":{"column":45,"line":149},"start":{"column":43,"line":149}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"388","location":{"end":{"column":78,"line":152},"start":{"column":11,"line":152}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"},{"id":"390","location":{"end":{"column":45,"line":152},"start":{"column":43,"line":152}},"mutatorName":"LogicalOperator","replacement":"||","status":"RuntimeError"},{"id":"391","location":{"end":{"column":78,"line":152},"start":{"column":46,"line":152}},"mutatorName":"BooleanLiteral","replacement":"this.isTokenAutoSuccess(tokenA)","status":"RuntimeError"},{"id":"389","location":{"end":{"column":78,"line":152},"start":{"column":11,"line":152}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"392","location":{"end":{"column":8,"line":154},"start":{"column":80,"line":152}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"394","location":{"end":{"column":72,"line":155},"start":{"column":11,"line":155}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError"},{"id":"395","location":{"end":{"column":42,"line":155},"start":{"column":40,"line":155}},"mutatorName":"LogicalOperator","replacement":"||","status":"RuntimeError"},{"id":"393","location":{"end":{"column":72,"line":155},"start":{"column":11,"line":155}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"396","location":{"end":{"column":72,"line":155},"start":{"column":43,"line":155}},"mutatorName":"BooleanLiteral","replacement":"this.isTokenAutoFail(tokenB)","status":"RuntimeError"},{"id":"398","location":{"end":{"column":72,"line":158},"start":{"column":11,"line":158}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"},{"id":"399","location":{"end":{"column":72,"line":158},"start":{"column":11,"line":158}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError"},{"id":"397","location":{"end":{"column":8,"line":157},"start":{"column":74,"line":155}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"400","location":{"end":{"column":42,"line":158},"start":{"column":40,"line":158}},"mutatorName":"LogicalOperator","replacement":"||","status":"RuntimeError"},{"id":"402","location":{"end":{"column":8,"line":160},"start":{"column":74,"line":158}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"403","location":{"end":{"column":18,"line":159},"start":{"column":16,"line":159}},"mutatorName":"UnaryOperator","replacement":"+1","status":"RuntimeError"},{"id":"404","location":{"end":{"column":45,"line":161},"start":{"column":44,"line":161}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"RuntimeError"},{"id":"401","location":{"end":{"column":72,"line":158},"start":{"column":43,"line":158}},"mutatorName":"BooleanLiteral","replacement":"this.isTokenAutoFail(tokenA)","status":"Killed"},{"id":"405","location":{"end":{"column":4,"line":191},"start":{"column":76,"line":178}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"407","location":{"end":{"column":50,"line":180},"start":{"column":9,"line":180}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError"},{"id":"408","location":{"end":{"column":49,"line":180},"start":{"column":21,"line":180}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"RuntimeError"},{"id":"406","location":{"end":{"column":50,"line":180},"start":{"column":9,"line":180}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"409","location":{"end":{"column":6,"line":182},"start":{"column":52,"line":180}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"411","location":{"end":{"column":53,"line":183},"start":{"column":9,"line":183}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"},{"id":"412","location":{"end":{"column":53,"line":183},"start":{"column":9,"line":183}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError"},{"id":"410","location":{"end":{"column":19,"line":181},"start":{"column":14,"line":181}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"413","location":{"end":{"column":52,"line":183},"start":{"column":21,"line":183}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"RuntimeError"},{"id":"415","location":{"end":{"column":18,"line":184},"start":{"column":14,"line":184}},"mutatorName":"BooleanLiteral","replacement":"false","status":"RuntimeError"},{"id":"416","location":{"end":{"column":8,"line":189},"start":{"column":7,"line":187}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError"},{"id":"417","location":{"end":{"column":8,"line":189},"start":{"column":7,"line":187}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"},{"id":"414","location":{"end":{"column":6,"line":185},"start":{"column":55,"line":183}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"418","location":{"end":{"column":32,"line":188},"start":{"column":30,"line":188}},"mutatorName":"EqualityOperator","replacement":"<","status":"RuntimeError"},{"id":"420","location":{"end":{"column":69,"line":187},"start":{"column":68,"line":187}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"RuntimeError"},{"id":"421","location":{"end":{"column":63,"line":187},"start":{"column":21,"line":187}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"RuntimeError"},{"id":"419","location":{"end":{"column":32,"line":188},"start":{"column":30,"line":188}},"mutatorName":"EqualityOperator","replacement":">","status":"Killed"},{"id":"422","location":{"end":{"column":38,"line":187},"start":{"column":37,"line":187}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"RuntimeError"},{"id":"423","location":{"end":{"column":4,"line":210},"start":{"column":58,"line":205}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"424","location":{"end":{"column":6,"line":209},"start":{"column":12,"line":206}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"RuntimeError"},{"id":"426","location":{"end":{"column":72,"line":207},"start":{"column":43,"line":207}},"mutatorName":"BooleanLiteral","replacement":"this.getEffect(t).isRedraw()","status":"RuntimeError"},{"id":"427","location":{"end":{"column":68,"line":208},"start":{"column":35,"line":208}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"RuntimeError"},{"id":"425","location":{"end":{"column":72,"line":207},"start":{"column":38,"line":207}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"429","location":{"end":{"column":36,"line":214},"start":{"column":3,"line":214}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"RuntimeError"},{"id":"430","location":{"end":{"column":36,"line":215},"start":{"column":3,"line":215}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"RuntimeError"},{"id":"428","location":{"end":{"column":2,"line":228},"start":{"column":67,"line":213}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"431","location":{"end":{"column":32,"line":216},"start":{"column":3,"line":216}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"RuntimeError"},{"id":"432","location":{"end":{"column":38,"line":217},"start":{"column":3,"line":217}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"RuntimeError"},{"id":"434","location":{"end":{"column":38,"line":218},"start":{"column":3,"line":218}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"RuntimeError"},{"id":"433","location":{"end":{"column":36,"line":217},"start":{"column":34,"line":217}},"mutatorName":"UnaryOperator","replacement":"+1","status":"Survived"},{"id":"436","location":{"end":{"column":40,"line":219},"start":{"column":3,"line":219}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"RuntimeError"},{"id":"435","location":{"end":{"column":36,"line":218},"start":{"column":34,"line":218}},"mutatorName":"UnaryOperator","replacement":"+2","status":"Survived"},{"id":"438","location":{"end":{"column":39,"line":220},"start":{"column":3,"line":220}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"RuntimeError"},{"id":"437","location":{"end":{"column":38,"line":219},"start":{"column":36,"line":219}},"mutatorName":"UnaryOperator","replacement":"+3","status":"Survived"},{"id":"440","location":{"end":{"column":39,"line":221},"start":{"column":3,"line":221}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"RuntimeError"},{"id":"439","location":{"end":{"column":37,"line":220},"start":{"column":35,"line":220}},"mutatorName":"UnaryOperator","replacement":"+4","status":"Survived"},{"id":"442","location":{"end":{"column":38,"line":222},"start":{"column":3,"line":222}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"RuntimeError"},{"id":"441","location":{"end":{"column":37,"line":221},"start":{"column":35,"line":221}},"mutatorName":"UnaryOperator","replacement":"+5","status":"Survived"},{"id":"444","location":{"end":{"column":40,"line":223},"start":{"column":3,"line":223}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"RuntimeError"},{"id":"443","location":{"end":{"column":36,"line":222},"start":{"column":34,"line":222}},"mutatorName":"UnaryOperator","replacement":"+6","status":"Survived"},{"id":"446","location":{"end":{"column":40,"line":224},"start":{"column":3,"line":224}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"RuntimeError"},{"id":"445","location":{"end":{"column":38,"line":223},"start":{"column":36,"line":223}},"mutatorName":"UnaryOperator","replacement":"+7","status":"Survived"},{"id":"448","location":{"end":{"column":35,"line":225},"start":{"column":3,"line":225}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"RuntimeError"},{"id":"449","location":{"end":{"column":39,"line":226},"start":{"column":3,"line":226}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"RuntimeError"},{"id":"447","location":{"end":{"column":38,"line":224},"start":{"column":36,"line":224}},"mutatorName":"UnaryOperator","replacement":"+8","status":"Survived"},{"id":"451","location":{"end":{"column":40,"line":227},"start":{"column":3,"line":227}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"RuntimeError"},{"id":"450","location":{"end":{"column":37,"line":226},"start":{"column":33,"line":226}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"452","location":{"end":{"column":32,"line":227},"start":{"column":30,"line":227}},"mutatorName":"UnaryOperator","replacement":"+2","status":"Survived"},{"id":"453","location":{"end":{"column":38,"line":227},"start":{"column":34,"line":227}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"}],"source":"import { Autofail } from \"./Autofail\";\nimport { Modifier } from \"./Modifier\";\nimport { Token } from \"./Token\";\nimport { TokenEffect } from \"./TokenEffect\";\nimport { TokenEffectType } from \"./TokenEffectType\";\n\ntype TokenEffectMapping = [Token, TokenEffect];\n\n/**\n * A immutable mapping of token effects.\n */\nexport class TokenEffects {\n  private _map: Map<Token, TokenEffect>;\n\n  constructor(mappings?: TokenEffectMapping[]) {\n    if (mappings) {\n      this._map = new Map(mappings);\n    } else {\n      this._map = new Map<Token, TokenEffect>();\n    }\n  }\n\n  /**\n   * Get the effect of the specified token.\n   *\n   * @param {Token} token\n   *   The token from which we want the effect.\n   * @return {TokenEffect}\n   *   The effect of the specified token.\n   */\n  public getEffect(token: Token): TokenEffect {\n    return this._map.get(token);\n  }\n\n  /**\n   * Sets the effect for the specified token and returns a new mapping (the\n   * original mapping is untouched).\n   *\n   * @param {Token} token\n   *   The token to set the effect for.\n   * @param {TokenEffect} effect\n   *   The effect.\n   * @return {TokenEffects}\n   *   The whole mapping.\n   */\n  public setEffect(token: Token, effect: TokenEffect): TokenEffects {\n    const newMap = new Map(this._map);\n    newMap.set(token, effect);\n\n    const newEffects = new TokenEffects();\n    newEffects._map = newMap;\n\n    return newEffects;\n  }\n\n  /**\n   * Sets multiple effects at once a returns a new mapping.\n   *\n   * @param {TokenEffectMapping[]} mappings\n   *   An array of token/effect pairs.\n   * @return {TokenEffects}\n   *   A new mapping.\n   */\n  public setEffects(mappings: TokenEffectMapping[]): TokenEffects {\n    const newMap = new Map(this._map);\n    mappings.forEach(([token, effect]) => {\n      newMap.set(token, effect);\n    });\n\n    const newEffects = new TokenEffects();\n    newEffects._map = newMap;\n\n    return newEffects;\n  }\n\n  /**\n   * Constructs a new token effects map by adding or overriding effects from\n   * another token effects map.\n   *\n   * @param {TokenEffects}\n   *   The token effects map to add.\n   * @return {TokenEffects}\n   *   A new token effects map.\n   */\n  public merge(otherEffects: TokenEffects): TokenEffects {\n    const newTokenEffects = new TokenEffects();\n    this._map.forEach((effect, token) => {\n      newTokenEffects._map.set(token, effect);\n    });\n    otherEffects._map.forEach((effect, token) => {\n      newTokenEffects._map.set(token, effect);\n    });\n    return newTokenEffects;\n  }\n\n  /**\n   * Indicate of the specified token is autosuccess for this bag.\n   *\n   * @method isTokenAutoSuccess\n   * @param {Token} token\n   *   The token.\n   * @return {boolean} `true` if the token is autosuccess, `false` otherwise.\n   */\n  public isTokenAutoSuccess(token: Token): boolean {\n    return this._map.get(token).getOutcome() === TokenEffectType.AUTOSUCCESS;\n  }\n\n  /**\n   * Indicate of the specified token is autofail for this bag.\n   *\n   * @method isTokenAutoFail\n   * @param {Token} token\n   *   The token.\n   * @return {boolean} `true` if the token is autofail, `false` otherwise.\n   */\n  public isTokenAutoFail(token: Token): boolean {\n    return this._map.get(token).getOutcome() === TokenEffectType.AUTOFAIL;\n  }\n\n  /**\n   * Get the modifier value of the specified token for this bag.\n   *\n   * @method getTokenModifier\n   * @param {Token} token\n   *   The token.\n   * @return {number} The modifier value.\n   * @throws {TypeError} if the specified token is an autosuccess or an autofail.\n   */\n  public getTokenModifier(token: Token): number {\n    if (this._map.get(token).getOutcome() !== TokenEffectType.MODIFIER) {\n      throw new TypeError(`token ${token} is not a modifier`);\n    }\n    return (this._map.get(token) as Modifier).getValue();\n  }\n\n  /**\n   * Sort provided tokens from best outcome to worse.\n   *\n   * @method sortByBestOutcomeDesc\n   * @param {Token[]} tokens\n   *   The tokens to sort.\n   * @return {Token[]} Sorted tokens.\n   */\n  public sortByBestOutcomeDesc(tokens: Token[]): Token[] {\n    return tokens.sort((tokenA: Token, tokenB: Token) => {\n      if (tokenA === tokenB) {\n        return 0;\n      }\n      if (this.isTokenAutoSuccess(tokenA) && !this.isTokenAutoSuccess(tokenB)) {\n        return -1;\n      }\n      if (this.isTokenAutoSuccess(tokenB) && !this.isTokenAutoSuccess(tokenA)) {\n        return 1;\n      }\n      if (this.isTokenAutoFail(tokenA) && !this.isTokenAutoFail(tokenB)) {\n        return 1;\n      }\n      if (this.isTokenAutoFail(tokenB) && !this.isTokenAutoFail(tokenA)) {\n        return -1;\n      }\n      return this.getTokenModifier(tokenB) - this.getTokenModifier(tokenA);\n    });\n  }\n\n  /**\n   * Return wether or not pulling these tokens result in a success given the\n   * difference between to total skill value and the test difficulty. If\n   * several tokens are provided and none of them are autosuccess or autofails,\n   * their modifier values are added.\n   *\n   * @method isSuccess\n   * @param {Token[]} tokens\n   *   The tokens pulled from the bag.\n   * @param {number} skillMinusDifficulty\n   *   The difference between the total skill value and the difficulty fo the\n   *   test.\n   */\n  public isSuccess(tokens: Token[], skillMinusDifficulty: number): boolean {\n    // Autofail prevails\n    if (tokens.some(t => this.isTokenAutoFail(t))) {\n      return false;\n    }\n    if (tokens.some(t => this.isTokenAutoSuccess(t))) {\n      return true;\n    }\n    return (\n      tokens.reduce((sum, t) => sum + this.getTokenModifier(t), 0) +\n        skillMinusDifficulty >=\n      0\n    );\n  }\n\n  /**\n   * Separate redraw tokens from non-redraw tokens in the supplied array of\n   * tokens.\n   *\n   * @param {Token[]} tokens\n   *   The tokens to separate.\n   * @return {{ redrawTokens: Token[]; nonRedrawTokens: Token[] }}\n   *   An object with `redrawTokens` containing the redraw tokens and\n   *   `nonRedrawTokens` containing non-redraw tokens.\n   */\n  public separateRedrawTokens(\n    tokens: Token[]\n  ): { redrawTokens: Token[]; nonRedrawTokens: Token[] } {\n    return {\n      nonRedrawTokens: tokens.filter(t => !this.getEffect(t).isRedraw()),\n      redrawTokens: tokens.filter(t => this.getEffect(t).isRedraw())\n    };\n  }\n}\n\nexport const DefaultTokenEffects: TokenEffects = new TokenEffects([\n  [Token.PLUS_ONE, new Modifier(1)],\n  [Token.PLUS_ONE, new Modifier(1)],\n  [Token.ZERO, new Modifier(0)],\n  [Token.MINUS_ONE, new Modifier(-1)],\n  [Token.MINUS_TWO, new Modifier(-2)],\n  [Token.MINUS_THREE, new Modifier(-3)],\n  [Token.MINUS_FOUR, new Modifier(-4)],\n  [Token.MINUS_FIVE, new Modifier(-5)],\n  [Token.MINUS_SIX, new Modifier(-6)],\n  [Token.MINUS_SEVEN, new Modifier(-7)],\n  [Token.MINUS_EIGHT, new Modifier(-8)],\n  [Token.AUTOFAIL, new Autofail()],\n  [Token.BLESS, new Modifier(2, true)],\n  [Token.CURSE, new Modifier(-2, true)]\n]);\n"},"/home/runner/work/arkham-odds/arkham-odds/src/utils.ts":{"language":"typescript","mutants":[{"id":"454","location":{"end":{"column":2,"line":26},"start":{"column":58,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"455","location":{"end":{"column":20,"line":13},"start":{"column":15,"line":13}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"456","location":{"end":{"column":4,"line":25},"start":{"column":28,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"457","location":{"end":{"column":14,"line":15},"start":{"column":9,"line":15}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"459","location":{"end":{"column":6,"line":17},"start":{"column":16,"line":15}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"458","location":{"end":{"column":14,"line":15},"start":{"column":9,"line":15}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"461","location":{"end":{"column":6,"line":24},"start":{"column":12,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"460","location":{"end":{"column":18,"line":16},"start":{"column":14,"line":16}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"462","location":{"end":{"column":21,"line":18},"start":{"column":11,"line":18}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"463","location":{"end":{"column":21,"line":18},"start":{"column":11,"line":18}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"465","location":{"end":{"column":8,"line":21},"start":{"column":23,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"464","location":{"end":{"column":16,"line":18},"start":{"column":13,"line":18}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"466","location":{"end":{"column":21,"line":19},"start":{"column":17,"line":19}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"468","location":{"end":{"column":8,"line":23},"start":{"column":14,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"467","location":{"end":{"column":21,"line":20},"start":{"column":16,"line":20}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"470","location":{"end":{"column":2,"line":46},"start":{"column":67,"line":40}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"469","location":{"end":{"column":20,"line":22},"start":{"column":16,"line":22}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"471","location":{"end":{"column":37,"line":41},"start":{"column":7,"line":41}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"472","location":{"end":{"column":37,"line":41},"start":{"column":7,"line":41}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"473","location":{"end":{"column":18,"line":41},"start":{"column":16,"line":41}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"474","location":{"end":{"column":13,"line":41},"start":{"column":11,"line":41}},"mutatorName":"EqualityOperator","replacement":"<","status":"Killed"},{"id":"475","location":{"end":{"column":13,"line":41},"start":{"column":11,"line":41}},"mutatorName":"EqualityOperator","replacement":">","status":"Killed"},{"id":"476","location":{"end":{"column":24,"line":41},"start":{"column":23,"line":41}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"478","location":{"end":{"column":4,"line":43},"start":{"column":39,"line":41}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"477","location":{"end":{"column":24,"line":41},"start":{"column":23,"line":41}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"479","location":{"end":{"column":67,"line":42},"start":{"column":12,"line":42}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"481","location":{"end":{"column":4,"line":45},"start":{"column":10,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"480","location":{"end":{"column":63,"line":42},"start":{"column":62,"line":42}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"483","location":{"end":{"column":2,"line":56},"start":{"column":38,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"482","location":{"end":{"column":22,"line":44},"start":{"column":12,"line":44}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"484","location":{"end":{"column":25,"line":49},"start":{"column":7,"line":49}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"485","location":{"end":{"column":25,"line":49},"start":{"column":7,"line":49}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"486","location":{"end":{"column":23,"line":49},"start":{"column":20,"line":49}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"487","location":{"end":{"column":4,"line":51},"start":{"column":27,"line":49}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"489","location":{"end":{"column":15,"line":50},"start":{"column":13,"line":50}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"RuntimeError"},{"id":"490","location":{"end":{"column":2,"line":60},"start":{"column":47,"line":58}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"488","location":{"end":{"column":16,"line":50},"start":{"column":12,"line":50}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"491","location":{"end":{"column":12,"line":59},"start":{"column":10,"line":59}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"493","location":{"end":{"column":2,"line":88},"start":{"column":57,"line":72}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"492","location":{"end":{"column":28,"line":59},"start":{"column":26,"line":59}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"494","location":{"end":{"column":46,"line":73},"start":{"column":7,"line":73}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"495","location":{"end":{"column":46,"line":73},"start":{"column":7,"line":73}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"496","location":{"end":{"column":46,"line":73},"start":{"column":7,"line":73}},"mutatorName":"BooleanLiteral","replacement":"(Array.isArray(a) && Array.isArray(b))","status":"Killed"},{"id":"497","location":{"end":{"column":45,"line":73},"start":{"column":9,"line":73}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"498","location":{"end":{"column":45,"line":73},"start":{"column":9,"line":73}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"499","location":{"end":{"column":28,"line":73},"start":{"column":26,"line":73}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"500","location":{"end":{"column":4,"line":75},"start":{"column":48,"line":73}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"501","location":{"end":{"column":17,"line":74},"start":{"column":12,"line":74}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"502","location":{"end":{"column":28,"line":77},"start":{"column":7,"line":77}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"503","location":{"end":{"column":28,"line":77},"start":{"column":7,"line":77}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"504","location":{"end":{"column":19,"line":77},"start":{"column":16,"line":77}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"505","location":{"end":{"column":4,"line":79},"start":{"column":30,"line":77}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"506","location":{"end":{"column":17,"line":78},"start":{"column":12,"line":78}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"507","location":{"end":{"column":31,"line":81},"start":{"column":19,"line":81}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"508","location":{"end":{"column":22,"line":81},"start":{"column":21,"line":81}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Survived"},{"id":"509","location":{"end":{"column":22,"line":81},"start":{"column":21,"line":81}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"511","location":{"end":{"column":4,"line":85},"start":{"column":38,"line":81}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"512","location":{"end":{"column":22,"line":82},"start":{"column":9,"line":82}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"513","location":{"end":{"column":22,"line":82},"start":{"column":9,"line":82}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"514","location":{"end":{"column":17,"line":82},"start":{"column":14,"line":82}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"515","location":{"end":{"column":6,"line":84},"start":{"column":24,"line":82}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"516","location":{"end":{"column":19,"line":83},"start":{"column":14,"line":83}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"517","location":{"end":{"column":14,"line":87},"start":{"column":10,"line":87}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"518","location":{"end":{"column":2,"line":124},"start":{"column":63,"line":100}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"519","location":{"end":{"column":13,"line":101},"start":{"column":7,"line":101}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"520","location":{"end":{"column":13,"line":101},"start":{"column":7,"line":101}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"521","location":{"end":{"column":11,"line":101},"start":{"column":9,"line":101}},"mutatorName":"EqualityOperator","replacement":"<","status":"Killed"},{"id":"522","location":{"end":{"column":11,"line":101},"start":{"column":9,"line":101}},"mutatorName":"EqualityOperator","replacement":">","status":"Killed"},{"id":"523","location":{"end":{"column":4,"line":103},"start":{"column":15,"line":101}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"524","location":{"end":{"column":16,"line":102},"start":{"column":12,"line":102}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"525","location":{"end":{"column":15,"line":102},"start":{"column":13,"line":102}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"RuntimeError"},{"id":"526","location":{"end":{"column":4,"line":123},"start":{"column":52,"line":106}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"527","location":{"end":{"column":33,"line":108},"start":{"column":9,"line":108}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"528","location":{"end":{"column":33,"line":108},"start":{"column":9,"line":108}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"529","location":{"end":{"column":31,"line":108},"start":{"column":28,"line":108}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"530","location":{"end":{"column":6,"line":110},"start":{"column":35,"line":108}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"531","location":{"end":{"column":46,"line":113},"start":{"column":45,"line":113}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"532","location":{"end":{"column":6,"line":119},"start":{"column":58,"line":116}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"533","location":{"end":{"column":8,"line":123},"start":{"column":6,"line":123}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"RuntimeError"},{"id":"534","location":{"end":{"column":2,"line":132},"start":{"column":55,"line":126}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"535","location":{"end":{"column":26,"line":127},"start":{"column":24,"line":127}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"RuntimeError"},{"id":"536","location":{"end":{"column":36,"line":128},"start":{"column":19,"line":128}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"537","location":{"end":{"column":23,"line":128},"start":{"column":21,"line":128}},"mutatorName":"EqualityOperator","replacement":"<","status":"Killed"},{"id":"538","location":{"end":{"column":23,"line":128},"start":{"column":21,"line":128}},"mutatorName":"EqualityOperator","replacement":">","status":"Killed"},{"id":"510","location":{"end":{"column":36,"line":81},"start":{"column":33,"line":81}},"mutatorName":"UpdateOperator","replacement":"i--","status":"Timeout"},{"id":"540","location":{"end":{"column":4,"line":130},"start":{"column":43,"line":128}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"541","location":{"end":{"column":2,"line":147},"start":{"column":60,"line":134}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"542","location":{"end":{"column":6,"line":144},"start":{"column":31,"line":136}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"543","location":{"end":{"column":10,"line":142},"start":{"column":29,"line":138}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"544","location":{"end":{"column":12,"line":141},"start":{"column":36,"line":139}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"545","location":{"end":{"column":29,"line":140},"start":{"column":20,"line":140}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"546","location":{"end":{"column":9,"line":145},"start":{"column":5,"line":145}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"547","location":{"end":{"column":8,"line":145},"start":{"column":6,"line":145}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"RuntimeError"},{"id":"548","location":{"end":{"column":2,"line":166},"start":{"column":46,"line":160}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"549","location":{"end":{"column":25,"line":162},"start":{"column":19,"line":162}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"539","location":{"end":{"column":41,"line":128},"start":{"column":38,"line":128}},"mutatorName":"UpdateOperator","replacement":"i--","status":"Timeout"},{"id":"550","location":{"end":{"column":23,"line":162},"start":{"column":21,"line":162}},"mutatorName":"EqualityOperator","replacement":"<","status":"Killed"},{"id":"551","location":{"end":{"column":23,"line":162},"start":{"column":21,"line":162}},"mutatorName":"EqualityOperator","replacement":">","status":"Timeout"},{"id":"552","location":{"end":{"column":30,"line":162},"start":{"column":27,"line":162}},"mutatorName":"UpdateOperator","replacement":"i--","status":"Timeout"},{"id":"553","location":{"end":{"column":4,"line":164},"start":{"column":32,"line":162}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"554","location":{"end":{"column":32,"line":163},"start":{"column":31,"line":163}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Killed"}],"source":"/**\n * Returns a new array with the first occurrence of an element removed from\n * the array passed.\n *\n * @param {T[]} elems\n *   The original array.\n * @param {T} elem\n *   The element to remove\n * @return {T[]}\n *   A new array with the element removed if original array contained it.\n */\nexport function removeFirst<T>(elems: T[], elem: T): T[] {\n  let found = false;\n  return elems.filter(e => {\n    if (found) {\n      return true;\n    } else {\n      if (e === elem) {\n        found = true;\n        return false;\n      } else {\n        return true;\n      }\n    }\n  });\n}\n\n/**\n * Returns a new array with element at index `idx` replaced with `elem`.\n *\n * @param {T[]} elems\n *   The original array.\n * @param {number} idx\n *   The index at which to replace.\n * @param {T} elem\n *   The element to place at the specified index.\n * @return {T[]}\n *   A new array with the element replaced.\n */\nexport function replace<T>(elems: T[], idx: number, elem: T): T[] {\n  if (idx >= 0 && idx < elems.length) {\n    return [...elems.slice(0, idx), elem, ...elems.slice(idx + 1)];\n  } else {\n    return [...elems];\n  }\n}\n\nfunction tails<T>(elems: T[]): T[][] {\n  if (elems.length === 0) {\n    return [[]];\n  }\n\n  const a = tails(elems.slice(1));\n  a.unshift(elems.slice(0));\n  return a;\n}\n\nexport function flatten<T>(elems: T[][]): T[] {\n  return [].concat.apply([], elems);\n}\n\n/**\n * Compare 2 arrays using `===`. No deep comparaison.\n *\n * @param {T[]} a\n *   First array\n * @param {T[]} b\n *   Second array\n * @return {boolean}\n *   True if `a` and `b` contains the same values in the same order.\n */\nexport function arrayEquals<T>(a: T[], b: T[]): boolean {\n  if (!(Array.isArray(a) && Array.isArray(b))) {\n    return false;\n  }\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Returns combinations of elements from an array.\n *\n * @param {number} k\n *   The number of elements in each combination.\n * @param {T[]} elems\n *   The array of elements to pull from.\n * @return {T[][]}\n *   All possible combinations of `k` elements among `elems`.\n */\nexport function combinations<T>(k: number, elems: T[]): T[][] {\n  if (k <= 0) {\n    return [[]];\n  }\n\n  // Get all tails\n  return tails(elems).reduce((acc, tailOfElems) => {\n    // For each tail ...\n    if (tailOfElems.length === 0) {\n      return acc;\n    }\n\n    // Recursion : get all combinations of (k-1) elements with end elements\n    const tailCombinations = combinations(k - 1, tailOfElems.slice(1));\n\n    // Prepend first element to all combinations\n    const comb = tailCombinations.map(tailCombination => {\n      tailCombination.unshift(tailOfElems[0]);\n      return tailCombination;\n    });\n\n    // Add to result\n    return acc.concat(comb);\n  }, [] as T[][]);\n}\n\nexport function allCombinations<T>(elems: T[]): T[][] {\n  let allComb: T[][] = [];\n  for (let i = 0; i <= elems.length; i++) {\n    allComb = allComb.concat(combinations(i, elems));\n  }\n  return allComb;\n}\n\nexport function cartesianProduct<T>(...sets: T[][]): T[][] {\n  return sets.reduce(\n    (acc: T[][], set: T[]) => {\n      return flatten(\n        acc.map((x: T[]) => {\n          return set.map((y: T) => {\n            return [...x, y];\n          });\n        })\n      );\n    },\n    [[]] as T[][]\n  );\n}\n\n/**\n * Compute the fractional n!\n *\n * Here we are using an iterative version of this function for better\n * performance over a recursive version.\n *\n * @param {number} n\n *   The number to compute the factorial from\n * @return {number}\n *   The result of n!\n */\nexport function factorial(n: number): number {\n  let returnValue = 1;\n  for (let i = 2; i <= n; i++) {\n    returnValue = returnValue * i;\n  }\n  return returnValue;\n}\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}};